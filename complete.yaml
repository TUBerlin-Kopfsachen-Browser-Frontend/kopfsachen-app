openapi: 3.0.3
info:
  title: Kopfsachen
  version: "1.0"
  description: Kopfsachen e. V. is an association for the promotion of young
    people's mental health. The goal is to teach the basics of mental health
    literacy in various educational formats.
  license:
    name: MIT license
    url: https://github.com/kopfsachen-dev/api/blob/main/LICENSE
  contact:
    name: Kopfsachen e. V.
    email: mail@kopfsachen.org
    url: https://www.kopfsachen.org
paths:
  /self-service/registration/api:
    get:
      summary: Initate registration flow for APIs, Services, ...
      description: >-
        This endpoint initiates a registration flow for API clients such as
        microservices, mobile devices, and so on.


        To fetch and interact with an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.


        You MUST NOT use this endpoint in browser applications, neither client-side (SPAs, React, Angular) nor server-side (JSP, NodeJS). Using this endpoint makes you vulnerable to [CSRF attacks](https://owasp.org/www-community/attacks/csrf).


        This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).
      operationId: bouncer:initRegistration:api
      responses:
        "200":
          description: >-
            The login flow got created successfully. While the response returns
            a lot of information, that can be used to build a UI accordingly, it
            might be enough to extract the `id` value from the JSON response
            most of the time.


            `id` is the `flowId` you need to provide to the `POST` registration endpoint.


            You can extract the URL of the endpoint to call also from `ui.action` with the required HTTP method `ui.method`
          content:
            application/json:
              schema:
                anyOf:
                  - example:
                      id: 9d7646c2-52b4-4c1f-a9b0-ec7b9e328cd6
                      type: api
                      expires_at: 2022-07-01T08:05:46.233962679Z
                      issued_at: 2022-07-01T07:50:46.233962679Z
                      request_url: http://auth.api.live.mindtastic.lol/self-service/registration/api
                      ui:
                        action: https://auth.api.live.mindtastic.lol/self-service/registration?flow=9d7646c2-52b4-4c1f-a9b0-ec7b9e328cd6
                        method: POST
                        messages: []
                        nodes:
                          - ...
                  - example:
                      expires_at: 2000-01-23T04:56:07.000Z
                      ui:
                        nodes:
                          - meta:
                              label:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                            messages:
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                            type: text
                            group: default
                          - meta:
                              label:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                            messages:
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                            type: text
                            group: default
                        method: method
                        action: action
                        messages:
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                      return_to: return_to
                      type: type
                      issued_at: 2000-01-23T04:56:07.000Z
                      request_url: request_url
                    properties:
                      active:
                        description: and so on.
                        enum:
                          - password
                          - totp
                          - oidc
                          - webauthn
                          - lookup_secret
                        title: CredentialsType  represents several different credential types, like
                          password credentials, passwordless credentials,
                        type: string
                      expires_at:
                        description: >-
                          ExpiresAt is the time (UTC) when the flow expires. If
                          the user still wishes to log in,

                          a new flow has to be initiated.
                        format: date-time
                        type: string
                      id:
                        format: uuid4
                        type: string
                      issued_at:
                        description: IssuedAt is the time (UTC) when the flow occurred.
                        format: date-time
                        type: string
                      request_url:
                        description: >-
                          RequestURL is the initial URL that was requested from
                          Ory Kratos. It can be used

                          to forward information contained in the URL's path or query for example.
                        type: string
                      return_to:
                        description: ReturnTo contains the requested return_to URL.
                        type: string
                      type:
                        description: The flow type can either be `api` or `browser`.
                        title: Type is the flow type.
                        type: string
                      ui:
                        description: Container represents a HTML Form. The container can work with both
                          HTTP Form and JSON requests
                        example:
                          nodes:
                            - meta:
                                label:
                                  context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              messages:
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              type: text
                              group: default
                            - meta:
                                label:
                                  context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              messages:
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              type: text
                              group: default
                          method: method
                          action: action
                          messages:
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                        properties:
                          action:
                            description: Action should be used as the form action URL `<form action="{{
                              .Action }}" method="post">`.
                            type: string
                          messages:
                            items:
                              example:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                              properties:
                                context:
                                  description: The message's context. Useful when customizing messages.
                                  type: object
                                id:
                                  format: int64
                                  type: integer
                                text:
                                  description: The message text. Written in american english.
                                  type: string
                                type:
                                  type: string
                              required:
                                - id
                                - text
                                - type
                              type: object
                            type: array
                          method:
                            description: Method is the form method (e.g. POST)
                            type: string
                          nodes:
                            items:
                              description: >-
                                Nodes are represented as HTML elements or their
                                native UI equivalents. For example,

                                a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
                              example:
                                meta:
                                  label:
                                    context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                messages:
                                  - context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                  - context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                type: text
                                group: default
                              properties:
                                attributes:
                                  discriminator:
                                    mapping:
                                      a: "#/uiNodeAnchorAttributes"
                                      img: "#/uiNodeImageAttributes"
                                      input: "#/uiNodeInputAttributes"
                                      script: "#/uiNodeScriptAttributes"
                                      text: "#/uiNodeTextAttributes"
                                    propertyName: node_type
                                  oneOf:
                                    - description: InputAttributes represents the attributes of an input node
                                      properties:
                                        disabled:
                                          description: Sets the input's disabled field to true or false.
                                          type: boolean
                                        label:
                                          $ref: "#/paths/~1self-service~1registration~1api/get/responses/200/content/appl\
                                            ication~1json/schema/anyOf/1/proper\
                                            ties/ui/properties/messages/items"
                                        name:
                                          description: The input's element name.
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "input".
                                          type: string
                                        onclick:
                                          description: >-
                                            OnClick may contain javascript which
                                            should be executed on click. This is
                                            primarily

                                            used for WebAuthn.
                                          type: string
                                        pattern:
                                          description: The input's pattern.
                                          type: string
                                        required:
                                          description: Mark this input field as required.
                                          type: boolean
                                        type:
                                          type: string
                                        value:
                                          description: The input's value.
                                          nullable: true
                                      required:
                                        - disabled
                                        - name
                                        - node_type
                                        - type
                                      type: object
                                    - properties:
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "text".
                                          type: string
                                        text:
                                          $ref: "#/paths/~1self-service~1registration~1api/get/responses/200/content/appl\
                                            ication~1json/schema/anyOf/1/proper\
                                            ties/ui/properties/messages/items"
                                      required:
                                        - id
                                        - node_type
                                        - text
                                      title: TextAttributes represents the attributes of a text node.
                                      type: object
                                    - properties:
                                        height:
                                          description: Height of the image
                                          format: int64
                                          type: integer
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "img".
                                          type: string
                                        src:
                                          description: |-
                                            The image's source URL.
                                            format: uri
                                          type: string
                                        width:
                                          description: Width of the image
                                          format: int64
                                          type: integer
                                      required:
                                        - height
                                        - id
                                        - node_type
                                        - src
                                        - width
                                      title: ImageAttributes represents the attributes of an image node.
                                      type: object
                                    - properties:
                                        href:
                                          description: |-
                                            The link's href (destination) URL.
                                            format: uri
                                          type: string
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "a".
                                          type: string
                                        title:
                                          $ref: "#/paths/~1self-service~1registration~1api/get/responses/200/content/appl\
                                            ication~1json/schema/anyOf/1/proper\
                                            ties/ui/properties/messages/items"
                                      required:
                                        - href
                                        - id
                                        - node_type
                                        - title
                                      title: AnchorAttributes represents the attributes of an anchor node.
                                      type: object
                                    - properties:
                                        async:
                                          description: The script async type
                                          type: boolean
                                        crossorigin:
                                          description: The script cross origin policy
                                          type: string
                                        id:
                                          description: A unique identifier
                                          type: string
                                        integrity:
                                          description: The script's integrity hash
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
                                          type: string
                                        nonce:
                                          description: >-
                                            Nonce for CSP

                                            A nonce you may want to use to improve your Content Security Policy.

                                            You do not have to use this value but if you want to improve your CSP

                                            policies you may use it. You can also choose to use your own nonce value!
                                          type: string
                                        referrerpolicy:
                                          description: The script referrer policy
                                          type: string
                                        src:
                                          description: The script source
                                          type: string
                                        type:
                                          description: The script MIME type
                                          type: string
                                      required:
                                        - async
                                        - crossorigin
                                        - id
                                        - integrity
                                        - node_type
                                        - nonce
                                        - referrerpolicy
                                        - src
                                        - type
                                      title: ScriptAttributes represent script nodes which load javascript.
                                      type: object
                                  title: Attributes represents a list of attributes (e.g. `href="foo"` for links).
                                group:
                                  description: Group specifies which group (e.g. password authenticator) this node
                                    belongs to.
                                  enum:
                                    - default
                                    - password
                                    - oidc
                                    - profile
                                    - link
                                    - totp
                                    - lookup_secret
                                    - webauthn
                                  type: string
                                messages:
                                  items:
                                    $ref: "#/paths/~1self-service~1registration~1api/get/responses/200/content/appl\
                                      ication~1json/schema/anyOf/1/properties/u\
                                      i/properties/messages/items"
                                  type: array
                                meta:
                                  description: >-
                                    This might include a label and other
                                    information that can optionally

                                    be used to render UIs.
                                  example:
                                    label:
                                      context: "{}"
                                      id: 0
                                      text: text
                                      type: type
                                  properties:
                                    label:
                                      $ref: "#/paths/~1self-service~1registration~1api/get/responses/200/content/appl\
                                        ication~1json/schema/anyOf/1/properties\
                                        /ui/properties/messages/items"
                                  title: A Node's Meta Information
                                  type: object
                                type:
                                  description: The node's type
                                  enum:
                                    - text
                                    - input
                                    - img
                                    - a
                                    - script
                                  type: string
                              required:
                                - attributes
                                - group
                                - messages
                                - meta
                                - type
                              title: Node represents a flow's nodes
                              type: object
                            type: array
                        required:
                          - action
                          - method
                          - nodes
                        type: object
                    required:
                      - expires_at
                      - id
                      - issued_at
                      - request_url
                      - type
                      - ui
                    type: object
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                description: The standard Ory JSON API error format.
                properties:
                  error:
                    properties:
                      code:
                        description: The status code
                        example: 404
                        format: int64
                        type: integer
                      debug:
                        description: >-
                          Debug information

                          This field is often not exposed to protect against leaking

                          sensitive information.
                        example: SQL field "foo" is not a bool.
                        type: string
                      details:
                        additionalProperties: false
                        description: Further error details
                        type: object
                      id:
                        description: >-
                          The error ID

                          Useful when trying to identify various errors in application logic.
                        type: string
                      message:
                        description: |-
                          Error message
                          The error's message.
                        example: The resource could not be found
                        type: string
                      reason:
                        description: A human-readable reason for the error
                        example: User with ID 1234 does not exist.
                        type: string
                      request:
                        description: >-
                          The request ID

                          The request ID is often exposed internally in order to trace

                          errors across service architectures. This is often a UUID.
                        example: d7ef54b1-ec15-46e6-bccb-524b82c035e6
                        type: string
                      status:
                        description: The status description
                        example: Not Found
                        type: string
                    required:
                      - message
                    type: object
                required:
                  - error
                title: Kratos API JSON Error Response
                type: object
      tags:
        - authentication
      servers:
        - url: https://auth.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  /self-service/registration/browser:
    get:
      operationId: bouncer:initRegistration:browser
      summary: Initialize Registration Flow for Browsers
      description: >-
        This endpoint initializes a browser-based user registration flow. This
        endpoint will set the appropriate cookies and anti-CSRF measures
        required for browser-based flows.


        The request must provide an Accepts headers of `application/json`


        If this endpoint is opened as a link in the browser, it will be redirected to

        `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. 


        If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.


        If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:

          - `session_already_available`: The user is already signed in.

          - `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.

          - `security_identity_mismatch`: The backend team fucked something up.

        If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.


        This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.
      parameters:
        - name: return_to
          in: query
          explode: true
          required: false
          schema:
            type: string
          style: form
          description: The URL to return the browser after the flow was completed. For
            Kopfsachen you might never need that option.
      responses:
        "200":
          description: Returns the successfully created browser registration flow
          content:
            application/json:
              schema:
                anyOf:
                  - example:
                      id: bedd058f-61bb-44de-a6b3-10fccccfd8f8
                      type: browser
                      expires_at: 2022-07-01T09:47:19.498757726Z
                      issued_at: 022-07-01T09:32:19.498757726Z
                      request_url: http://auth.api.live.mindtastic.lol/self-service/login/browser
                      ui:
                        action: https://auth.api.live.mindtastic.lol/self-service/login?flow=bedd058f-61bb-44de-a6b3-10fccccfd8f8
                        method: POST
                        nodes:
                          - type: input
                            group: default
                            attributes:
                              name: csrf_token
                              type: hidden
                              value: 2JScJjx9C0OLCB9O3GSVDHCBGHbXdNZ9B59StFXBlSRKt0hnb3bp
                              required: true
                              disable: false
                              node_type: input
                            messages: []
                            meta: {}
                          - ...
                  - description: This object represents a login flow. A login flow is initiated at
                      the "Initiate Login API / Browser Flow"
                    example:
                      expires_at: 2000-01-23T04:56:07.000Z
                      ui:
                        nodes:
                          - meta:
                              label:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                            messages:
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                            type: text
                            group: default
                          - meta:
                              label:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                            messages:
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                            type: text
                            group: default
                        method: method
                        action: action
                        messages:
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                      updated_at: 2000-01-23T04:56:07.000Z
                      created_at: 2000-01-23T04:56:07.000Z
                      refresh: true
                      return_to: return_to
                      type: type
                      issued_at: 2000-01-23T04:56:07.000Z
                      request_url: request_url
                    properties:
                      active:
                        description: and so on.
                        enum:
                          - password
                          - totp
                          - oidc
                          - webauthn
                          - lookup_secret
                        title: CredentialsType  represents several different credential types, like
                          password credentials, passwordless credentials,
                        type: string
                      created_at:
                        format: date-time
                        type: string
                      expires_at:
                        format: date-time
                        type: string
                      id:
                        format: uuid4
                        type: string
                      issued_at:
                        description: IssuedAt is the time (UTC) when the flow started.
                        format: date-time
                        type: string
                      refresh:
                        description: Refresh stores whether this login flow should enforce
                          re-authentication.
                        type: boolean
                      request_url:
                        description: >-
                          RequestURL is the initial URL that was requested from
                          Ory Kratos. It can be used

                          to forward information contained in the URL's path or query for example.
                        type: string
                      return_to:
                        description: ReturnTo contains the requested return_to URL.
                        type: string
                      type:
                        description: The flow type can either be `api` or `browser`.
                        title: Type is the flow type.
                        type: string
                      ui:
                        description: Container represents a HTML Form. The container can work with both
                          HTTP Form and JSON requests
                        example:
                          nodes:
                            - meta:
                                label:
                                  context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              messages:
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              type: text
                              group: default
                            - meta:
                                label:
                                  context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              messages:
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              type: text
                              group: default
                          method: method
                          action: action
                          messages:
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                        properties:
                          action:
                            description: Action should be used as the form action URL `<form action="{{
                              .Action }}" method="post">`.
                            type: string
                          messages:
                            items:
                              example:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                              properties:
                                context:
                                  description: The message's context. Useful when customizing messages.
                                  type: object
                                id:
                                  format: int64
                                  type: integer
                                text:
                                  description: The message text. Written in american english.
                                  type: string
                                type:
                                  type: string
                              required:
                                - id
                                - text
                                - type
                              type: object
                            type: array
                          method:
                            description: Method is the form method (e.g. POST)
                            type: string
                          nodes:
                            items:
                              description: >-
                                Nodes are represented as HTML elements or their
                                native UI equivalents. For example,

                                a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
                              example:
                                meta:
                                  label:
                                    context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                messages:
                                  - context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                  - context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                type: text
                                group: default
                              properties:
                                attributes:
                                  discriminator:
                                    mapping:
                                      a: "#/uiNodeAnchorAttributes"
                                      img: "#/uiNodeImageAttributes"
                                      input: "#/uiNodeInputAttributes"
                                      script: "#/uiNodeScriptAttributes"
                                      text: "#/uiNodeTextAttributes"
                                    propertyName: node_type
                                  oneOf:
                                    - description: InputAttributes represents the attributes of an input node
                                      properties:
                                        disabled:
                                          description: Sets the input's disabled field to true or false.
                                          type: boolean
                                        label:
                                          $ref: "#/paths/~1self-service~1registration~1browser/get/responses/200/content/\
                                            application~1json/schema/anyOf/1/pr\
                                            operties/ui/properties/messages/ite\
                                            ms"
                                        name:
                                          description: The input's element name.
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "input".
                                          type: string
                                        onclick:
                                          description: >-
                                            OnClick may contain javascript which
                                            should be executed on click. This is
                                            primarily

                                            used for WebAuthn.
                                          type: string
                                        pattern:
                                          description: The input's pattern.
                                          type: string
                                        required:
                                          description: Mark this input field as required.
                                          type: boolean
                                        type:
                                          type: string
                                        value:
                                          description: The input's value.
                                          nullable: true
                                      required:
                                        - disabled
                                        - name
                                        - node_type
                                        - type
                                      type: object
                                    - properties:
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "text".
                                          type: string
                                        text:
                                          $ref: "#/paths/~1self-service~1registration~1browser/get/responses/200/content/\
                                            application~1json/schema/anyOf/1/pr\
                                            operties/ui/properties/messages/ite\
                                            ms"
                                      required:
                                        - id
                                        - node_type
                                        - text
                                      title: TextAttributes represents the attributes of a text node.
                                      type: object
                                    - properties:
                                        height:
                                          description: Height of the image
                                          format: int64
                                          type: integer
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "img".
                                          type: string
                                        src:
                                          description: |-
                                            The image's source URL.
                                            format: uri
                                          type: string
                                        width:
                                          description: Width of the image
                                          format: int64
                                          type: integer
                                      required:
                                        - height
                                        - id
                                        - node_type
                                        - src
                                        - width
                                      title: ImageAttributes represents the attributes of an image node.
                                      type: object
                                    - properties:
                                        href:
                                          description: |-
                                            The link's href (destination) URL.
                                            format: uri
                                          type: string
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "a".
                                          type: string
                                        title:
                                          $ref: "#/paths/~1self-service~1registration~1browser/get/responses/200/content/\
                                            application~1json/schema/anyOf/1/pr\
                                            operties/ui/properties/messages/ite\
                                            ms"
                                      required:
                                        - href
                                        - id
                                        - node_type
                                        - title
                                      title: AnchorAttributes represents the attributes of an anchor node.
                                      type: object
                                    - properties:
                                        async:
                                          description: The script async type
                                          type: boolean
                                        crossorigin:
                                          description: The script cross origin policy
                                          type: string
                                        id:
                                          description: A unique identifier
                                          type: string
                                        integrity:
                                          description: The script's integrity hash
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
                                          type: string
                                        nonce:
                                          description: >-
                                            Nonce for CSP

                                            A nonce you may want to use to improve your Content Security Policy.

                                            You do not have to use this value but if you want to improve your CSP

                                            policies you may use it. You can also choose to use your own nonce value!
                                          type: string
                                        referrerpolicy:
                                          description: The script referrer policy
                                          type: string
                                        src:
                                          description: The script source
                                          type: string
                                        type:
                                          description: The script MIME type
                                          type: string
                                      required:
                                        - async
                                        - crossorigin
                                        - id
                                        - integrity
                                        - node_type
                                        - nonce
                                        - referrerpolicy
                                        - src
                                        - type
                                      title: ScriptAttributes represent script nodes which load javascript.
                                      type: object
                                  title: Attributes represents a list of attributes (e.g. `href="foo"` for links).
                                group:
                                  description: Group specifies which group (e.g. password authenticator) this node
                                    belongs to.
                                  enum:
                                    - default
                                    - password
                                    - oidc
                                    - profile
                                    - link
                                    - totp
                                    - lookup_secret
                                    - webauthn
                                  type: string
                                messages:
                                  items:
                                    $ref: "#/paths/~1self-service~1registration~1browser/get/responses/200/content/\
                                      application~1json/schema/anyOf/1/properti\
                                      es/ui/properties/messages/items"
                                  type: array
                                meta:
                                  description: >-
                                    This might include a label and other
                                    information that can optionally

                                    be used to render UIs.
                                  example:
                                    label:
                                      context: "{}"
                                      id: 0
                                      text: text
                                      type: type
                                  properties:
                                    label:
                                      $ref: "#/paths/~1self-service~1registration~1browser/get/responses/200/content/\
                                        application~1json/schema/anyOf/1/proper\
                                        ties/ui/properties/messages/items"
                                  title: A Node's Meta Information
                                  type: object
                                type:
                                  description: The node's type
                                  enum:
                                    - text
                                    - input
                                    - img
                                    - a
                                    - script
                                  type: string
                              required:
                                - attributes
                                - group
                                - messages
                                - meta
                                - type
                              title: Node represents a flow's nodes
                              type: object
                            type: array
                        required:
                          - action
                          - method
                          - nodes
                        type: object
                      updated_at:
                        description: UpdatedAt is a helper struct field for gobuffalo.pop.
                        format: date-time
                        type: string
                    required:
                      - expires_at
                      - id
                      - issued_at
                      - request_url
                      - type
                      - ui
                    title: Login Flow
                    type: object
        "303":
          description: Redirect to `urls.default_redirect_url` as a valid user session
            already exists for the HTTP cookie.
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                  ication~1json/schema"
      x-accepts: application/json
      tags:
        - authentication
      servers:
        - url: https://auth.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  /self-service/registration:
    post:
      summary: Complete registration flow
      operationId: bouncer:register
      description: >-
        Use this endpoint to complete a registration flow. It will generate the
        unique account key for the newly created user, that serves as single
        credential in the authentication system.


        For API flows:
          - API flows are responded with `200 OK` on success and a application/json body with the created identity.
          
          - It also performs an auto login process and includes `session` and `session_token`.

          - If the flow is expired it returns `410 Gone`.

        For Browser Flows:
          - Browser flows expects Content-Type and Accepts headers of `application/json`.

          - The request body must contain an application/json body with the `csrf_token` property set accordingly

          - On success they respond with `200 OK` and a application/json body with the signed in identity and a `Set-Cookie` header on success. 

          - If the flow expired, it responds with `303 See Other`. Call the /self-service/registration/browser endpoint again to get a new flow.

        On success, the account key is in the response at `identity.traits.accountKey`. Fetch it and **save it carefully**, as there is no way to recover a lost account.


        The endpoint also performs auto login. The session token that can be used authorize requests, using `Authentication: Bearer <session token>` HTTP header is in `session.id`.
      parameters:
        - name: flow
          in: query
          required: true
          explode: true
          schema:
            type: string
          style: form
          description: The Registration flow ID as an URL Query parameters
        - name: Cookie
          in: header
          required: false
          explode: false
          schema:
            type: string
          style: simple
          description: When using the browser flow, the HTTP cookie (encodes session and
            CSRF token) must be present
      requestBody:
        description: Providing `csrf_token` is only required for browser flows. For API
          flows, request body can left empty.
        content:
          application/json:
            schema:
              type: object
              properties:
                csrf_token:
                  type: string
              example:
                csrf_token: th93GNHtVYbGg+/l9VUzuljNDlpWWEY7R5or26pwVytdLHpyxD86+ncnUnhaYzJyMU6F1L8d9x1+9PDVgH7B/w==
      responses:
        "200":
          description: OK. Registration successful.
          content:
            application/json:
              schema:
                title: Registration Response
                description: Registration with FlowID
                type: object
                properties:
                  identity:
                    title: Identity
                    description: An identity object
                    type: object
                    properties:
                      id:
                        format: uuid4
                        type: string
                      schema_id:
                        description: SchemaID is the ID of the JSON Schema to be used for validating the
                          identity's traits.
                        type: string
                      schema_url:
                        description: >-
                          SchemaURL is the URL of the endpoint where the
                          identity's traits schema can be fetched from.

                          format: url
                        type: string
                      state:
                        description: The state can either be `active` or `inactive`.
                        enum:
                          - active
                          - inactive
                        title: An Identity's State
                        type: string
                      state_changed_at:
                        format: date-time
                        title: NullTime implements sql.NullTime functionality.
                        type: string
                      traits:
                        description: Traits represent an identity's traits. We store the account key
                          here, which is the single credential for the
                          Kopfsachen API.
                      created_at:
                        format: date-time
                        type: string
                      updated_at:
                        format: date-time
                        type: string
                    required:
                      - id
                      - schema_id
                      - schema_url
                      - traits
                    example:
                      id: d653ee8a-b542-4c50-a570-42414dafd076
                      schema_id: user
                      schema_url: https://auth.api.live.mindtastic.lol/schemas/dXNlcg
                      state: active
                      state_changed_at: 2022-07-01T07:48:20.909705863Z
                      traits:
                        accountKey: 48275d7f-e317-23d9-60d8-0ea0f6995058
                      created_at: 2022-07-01T07:48:20.912202Z
                      updated:at: 2022-07-01T07:48:20.912202Z
                  session:
                    title: Bouncer Session
                    description: A session object
                    type: object
                    properties:
                      id:
                        format: uuid4
                        type: string
                      active:
                        description: Active state. If false the session is no longer active.
                        type: boolean
                      expires_at:
                        description: |-
                          The Session Expiry
                          When this session expires at.
                        format: date-time
                        type: string
                      authenticated_at:
                        description: >-
                          The Session Authentication Timestamp

                          When this session was authenticated at. If multi-factor authentication was used this

                          is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).
                        format: date-time
                        type: string
                      authenticator_assurance_level:
                        description: internal value
                        enum:
                          - aal0
                          - aal1
                          - aal2
                          - aal3
                        type: string
                      authentication_methods:
                        description: internal value.
                        type: object
                      issued_at:
                        description: >-
                          The Session Issuance Timestamp

                          When this session was issued at. Usually equal or close to `authenticated_at`.
                        format: date-time
                        type: string
                      identity:
                        title: Identity
                        description: An identity object
                        type: object
                        properties:
                          id:
                            $ref: "#/paths/~1self-service~1registration/post/responses/200/content/applicat\
                              ion~1json/schema/properties/session/properties/id"
                          schema_id:
                            description: SchemaID is the ID of the JSON Schema to be used for validating the
                              identity's traits.
                            type: string
                          schema_url:
                            description: >-
                              SchemaURL is the URL of the endpoint where the
                              identity's traits schema can be fetched from.

                              format: url
                            type: string
                          state:
                            description: The state can either be `active` or `inactive`.
                            enum:
                              - active
                              - inactive
                            title: An Identity's State
                            type: string
                          state_changed_at:
                            format: date-time
                            title: NullTime implements sql.NullTime functionality.
                            type: string
                          traits:
                            description: Traits represent an identity's traits. We store the account key
                              here, which is the single credential for the
                              Kopfsachen API.
                          created_at:
                            format: date-time
                            type: string
                          updated_at:
                            format: date-time
                            type: string
                        required:
                          - id
                          - schema_id
                          - schema_url
                          - traits
                        example:
                          id: d653ee8a-b542-4c50-a570-42414dafd076
                          schema_id: user
                          schema_url: https://auth.api.live.mindtastic.lol/schemas/dXNlcg
                          state: active
                          state_changed_at: 2022-07-01T07:48:20.909705863Z
                          traits:
                            accountKey: 48275d7f-e317-23d9-60d8-0ea0f6995058
                          created_at: 2022-07-01T07:48:20.912202Z
                          updated:at: 2022-07-01T07:48:20.912202Z
                    required:
                      - id
                      - identity
                    example:
                      id: 4fb42e7e-b3f1-44f7-b583-0485cda03c92
                      active: true
                      expires_at: 2022-07-02T07:48:20.921174998Z
                      authenticated_at: 2022-07-01T07:48:20.922137995Z
                      authenticator_assurance_level: aal1
                      authentication_methods:
                        - method: password
                          aal: aal1
                          completed_at: 2022-07-01T07:48:20.921344603Z
                      issued_at: 2022-07-01T07:48:20.921174998Z
                      identity:
                        id: d653ee8a-b542-4c50-a570-42414dafd076
                        schema_id: user
                        schema_url: https://auth.api.live.mindtastic.lol/schemas/dXNlcg
                        state: active
                        state_changed_at: 2022-07-01T07:48:20.909705863Z
                        traits:
                          accountKey: 48275d7f-e317-23d9-60d8-0ea0f6995058
                        created_at: 2022-07-01T07:48:20.912202Z
                        updated:at: 2022-07-01T07:48:20.912202Z
        "303":
          description: Browser flow expired
        "400":
          description: Bad requests. Maybe the flow id missing.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                      ication~1json/schema"
                  - example:
                      code: 400
                      status: Bad Request
                      reason: The flow query parameter is missing or malformed
                      message: The request was malformed or contained invalid parameters
        "410":
          description: Gone. The appropriate auth flow expired before submitting.
          content:
            application/json:
              schema:
                $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                  ication~1json/schema"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                  ication~1json/schema"
      x-accepts: application/json
      x-contentType: application/json
      tags:
        - authentication
      servers:
        - url: https://auth.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  /self-service/login/api:
    get:
      summary: Initiate API login flow
      description: >-
        This endpoint initiates a login flow for API clients that do not use a
        browser.


        It behaves similar to the registration endpoints.
      operationId: bouncer:initLogin:api
      parameters:
        - name: refresh
          in: query
          required: false
          explode: true
          schema:
            type: boolean
          style: form
          description: |-
            Refresh a login.

            If set to true, this will refresh an existing login session by
            asking the user to sign in again. This will reset the
            authenticated_at time of the session.
        - name: X-Session-Token
          in: header
          required: false
          explode: false
          schema:
            type: string
          style: simple
          description: The Session token of the Session performing the flow. Required when
            using the refresh parameter
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - example:
                      anyOf:
                        - request_url: http://auth.api.dev.mindtastic.lol/self-service/login/api
                          ui:
                            action: https://auth.api.dev.mindtastic.lol/self-service/login?flow=dae01032-cdd6-4381-82f5-1f7f4d2c42c6
                        - example:
                            id: 9d7646c2-52b4-4c1f-a9b0-ec7b9e328cd6
                            type: api
                            expires_at: 2022-07-01T08:05:46.233962679Z
                            issued_at: 2022-07-01T07:50:46.233962679Z
                            request_url: http://auth.api.live.mindtastic.lol/self-service/registration/api
                            ui:
                              action: https://auth.api.live.mindtastic.lol/self-service/registration?flow=9d7646c2-52b4-4c1f-a9b0-ec7b9e328cd6
                              method: POST
                              messages: []
                              nodes:
                                - ...
                  - description: This object represents a login flow. A login flow is initiated at
                      the "Initiate Login API / Browser Flow"
                    example:
                      expires_at: 2000-01-23T04:56:07.000Z
                      ui:
                        nodes:
                          - meta:
                              label:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                            messages:
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                            type: text
                            group: default
                          - meta:
                              label:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                            messages:
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                            type: text
                            group: default
                        method: method
                        action: action
                        messages:
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                      updated_at: 2000-01-23T04:56:07.000Z
                      created_at: 2000-01-23T04:56:07.000Z
                      refresh: true
                      return_to: return_to
                      type: type
                      issued_at: 2000-01-23T04:56:07.000Z
                      request_url: request_url
                    properties:
                      active:
                        description: and so on.
                        enum:
                          - password
                          - totp
                          - oidc
                          - webauthn
                          - lookup_secret
                        title: CredentialsType  represents several different credential types, like
                          password credentials, passwordless credentials,
                        type: string
                      created_at:
                        format: date-time
                        type: string
                      expires_at:
                        format: date-time
                        type: string
                      id:
                        format: uuid4
                        type: string
                      issued_at:
                        description: IssuedAt is the time (UTC) when the flow started.
                        format: date-time
                        type: string
                      refresh:
                        description: Refresh stores whether this login flow should enforce
                          re-authentication.
                        type: boolean
                      request_url:
                        description: >-
                          RequestURL is the initial URL that was requested from
                          Ory Kratos. It can be used

                          to forward information contained in the URL's path or query for example.
                        type: string
                      return_to:
                        description: ReturnTo contains the requested return_to URL.
                        type: string
                      type:
                        description: The flow type can either be `api` or `browser`.
                        title: Type is the flow type.
                        type: string
                      ui:
                        description: Container represents a HTML Form. The container can work with both
                          HTTP Form and JSON requests
                        example:
                          nodes:
                            - meta:
                                label:
                                  context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              messages:
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              type: text
                              group: default
                            - meta:
                                label:
                                  context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              messages:
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              type: text
                              group: default
                          method: method
                          action: action
                          messages:
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                        properties:
                          action:
                            description: Action should be used as the form action URL `<form action="{{
                              .Action }}" method="post">`.
                            type: string
                          messages:
                            items:
                              example:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                              properties:
                                context:
                                  description: The message's context. Useful when customizing messages.
                                  type: object
                                id:
                                  format: int64
                                  type: integer
                                text:
                                  description: The message text. Written in american english.
                                  type: string
                                type:
                                  type: string
                              required:
                                - id
                                - text
                                - type
                              type: object
                            type: array
                          method:
                            description: Method is the form method (e.g. POST)
                            type: string
                          nodes:
                            items:
                              description: >-
                                Nodes are represented as HTML elements or their
                                native UI equivalents. For example,

                                a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
                              example:
                                meta:
                                  label:
                                    context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                messages:
                                  - context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                  - context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                type: text
                                group: default
                              properties:
                                attributes:
                                  discriminator:
                                    mapping:
                                      a: "#/uiNodeAnchorAttributes"
                                      img: "#/uiNodeImageAttributes"
                                      input: "#/uiNodeInputAttributes"
                                      script: "#/uiNodeScriptAttributes"
                                      text: "#/uiNodeTextAttributes"
                                    propertyName: node_type
                                  oneOf:
                                    - description: InputAttributes represents the attributes of an input node
                                      properties:
                                        disabled:
                                          description: Sets the input's disabled field to true or false.
                                          type: boolean
                                        label:
                                          $ref: "#/paths/~1self-service~1login~1api/get/responses/200/content/application\
                                            ~1json/schema/anyOf/1/properties/ui\
                                            /properties/messages/items"
                                        name:
                                          description: The input's element name.
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "input".
                                          type: string
                                        onclick:
                                          description: >-
                                            OnClick may contain javascript which
                                            should be executed on click. This is
                                            primarily

                                            used for WebAuthn.
                                          type: string
                                        pattern:
                                          description: The input's pattern.
                                          type: string
                                        required:
                                          description: Mark this input field as required.
                                          type: boolean
                                        type:
                                          type: string
                                        value:
                                          description: The input's value.
                                          nullable: true
                                      required:
                                        - disabled
                                        - name
                                        - node_type
                                        - type
                                      type: object
                                    - properties:
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "text".
                                          type: string
                                        text:
                                          $ref: "#/paths/~1self-service~1login~1api/get/responses/200/content/application\
                                            ~1json/schema/anyOf/1/properties/ui\
                                            /properties/messages/items"
                                      required:
                                        - id
                                        - node_type
                                        - text
                                      title: TextAttributes represents the attributes of a text node.
                                      type: object
                                    - properties:
                                        height:
                                          description: Height of the image
                                          format: int64
                                          type: integer
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "img".
                                          type: string
                                        src:
                                          description: |-
                                            The image's source URL.
                                            format: uri
                                          type: string
                                        width:
                                          description: Width of the image
                                          format: int64
                                          type: integer
                                      required:
                                        - height
                                        - id
                                        - node_type
                                        - src
                                        - width
                                      title: ImageAttributes represents the attributes of an image node.
                                      type: object
                                    - properties:
                                        href:
                                          description: |-
                                            The link's href (destination) URL.
                                            format: uri
                                          type: string
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "a".
                                          type: string
                                        title:
                                          $ref: "#/paths/~1self-service~1login~1api/get/responses/200/content/application\
                                            ~1json/schema/anyOf/1/properties/ui\
                                            /properties/messages/items"
                                      required:
                                        - href
                                        - id
                                        - node_type
                                        - title
                                      title: AnchorAttributes represents the attributes of an anchor node.
                                      type: object
                                    - properties:
                                        async:
                                          description: The script async type
                                          type: boolean
                                        crossorigin:
                                          description: The script cross origin policy
                                          type: string
                                        id:
                                          description: A unique identifier
                                          type: string
                                        integrity:
                                          description: The script's integrity hash
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
                                          type: string
                                        nonce:
                                          description: >-
                                            Nonce for CSP

                                            A nonce you may want to use to improve your Content Security Policy.

                                            You do not have to use this value but if you want to improve your CSP

                                            policies you may use it. You can also choose to use your own nonce value!
                                          type: string
                                        referrerpolicy:
                                          description: The script referrer policy
                                          type: string
                                        src:
                                          description: The script source
                                          type: string
                                        type:
                                          description: The script MIME type
                                          type: string
                                      required:
                                        - async
                                        - crossorigin
                                        - id
                                        - integrity
                                        - node_type
                                        - nonce
                                        - referrerpolicy
                                        - src
                                        - type
                                      title: ScriptAttributes represent script nodes which load javascript.
                                      type: object
                                  title: Attributes represents a list of attributes (e.g. `href="foo"` for links).
                                group:
                                  description: Group specifies which group (e.g. password authenticator) this node
                                    belongs to.
                                  enum:
                                    - default
                                    - password
                                    - oidc
                                    - profile
                                    - link
                                    - totp
                                    - lookup_secret
                                    - webauthn
                                  type: string
                                messages:
                                  items:
                                    $ref: "#/paths/~1self-service~1login~1api/get/responses/200/content/application\
                                      ~1json/schema/anyOf/1/properties/ui/prope\
                                      rties/messages/items"
                                  type: array
                                meta:
                                  description: >-
                                    This might include a label and other
                                    information that can optionally

                                    be used to render UIs.
                                  example:
                                    label:
                                      context: "{}"
                                      id: 0
                                      text: text
                                      type: type
                                  properties:
                                    label:
                                      $ref: "#/paths/~1self-service~1login~1api/get/responses/200/content/application\
                                        ~1json/schema/anyOf/1/properties/ui/pro\
                                        perties/messages/items"
                                  title: A Node's Meta Information
                                  type: object
                                type:
                                  description: The node's type
                                  enum:
                                    - text
                                    - input
                                    - img
                                    - a
                                    - script
                                  type: string
                              required:
                                - attributes
                                - group
                                - messages
                                - meta
                                - type
                              title: Node represents a flow's nodes
                              type: object
                            type: array
                        required:
                          - action
                          - method
                          - nodes
                        type: object
                      updated_at:
                        description: UpdatedAt is a helper struct field for gobuffalo.pop.
                        format: date-time
                        type: string
                    required:
                      - expires_at
                      - id
                      - issued_at
                      - request_url
                      - type
                      - ui
                    title: Login Flow
                    type: object
        "500":
          description: Internal Service Error
          content:
            application/json:
              schema:
                $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                  ication~1json/schema"
      x-accepts: application/json
      tags:
        - authentication
      servers:
        - url: https://auth.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  /self-service/login/browser:
    get:
      operationId: bouncer:initLogin:browser
      summary: Initiate browser login flow
      description: >-
        This endpoint initializes a browser-based user registration flow. This
        endpoint will set the appropriate cookies and anti-CSRF measures
        required for browser-based flows.


        The request must provide an Accepts headers of `application/json`
      parameters:
        - name: return_to
          in: query
          explode: true
          required: false
          schema:
            type: string
          style: form
          description: The URL to return the browser after the flow was completed. For
            Kopfsachen you might never need that option.
      responses:
        "200":
          description: Returns the successfully created browser login flow
          content:
            application/json:
              schema:
                anyOf:
                  - example:
                      id: 2e1a12cd-6d01-4f5a-b0db-2ea60b99d5ea
                      type: browser
                      expires_at: 2022-07-01T08:05:46.233962679Z
                      issued_at: 2022-07-01T07:50:46.233962679Z
                      request_url: http://auth.api.live.mindtastic.lol/self-service/registration/browser
                      ui:
                        action: https://auth.api.live.mindtastic.lol/self-service/registration?flow=2e1a12cd-6d01-4f5a-b0db-2ea60b99d5ea
                        method: POST
                        nodes:
                          - type: input
                            group: default
                            attributes:
                              name: csrf_token
                              type: hidden
                              value: 2JScJjx9C0OLCB9O3GSVDHCBGHbXdNZ9B59StFXBlSRKt0hnb3bp
                              required: true
                              disable: false
                              node_type: input
                            messages: []
                            meta: {}
                          - ...
                  - example:
                      expires_at: 2000-01-23T04:56:07.000Z
                      ui:
                        nodes:
                          - meta:
                              label:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                            messages:
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                            type: text
                            group: default
                          - meta:
                              label:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                            messages:
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                            type: text
                            group: default
                        method: method
                        action: action
                        messages:
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                      return_to: return_to
                      type: type
                      issued_at: 2000-01-23T04:56:07.000Z
                      request_url: request_url
                    properties:
                      active:
                        description: and so on.
                        enum:
                          - password
                          - totp
                          - oidc
                          - webauthn
                          - lookup_secret
                        title: CredentialsType  represents several different credential types, like
                          password credentials, passwordless credentials,
                        type: string
                      expires_at:
                        description: >-
                          ExpiresAt is the time (UTC) when the flow expires. If
                          the user still wishes to log in,

                          a new flow has to be initiated.
                        format: date-time
                        type: string
                      id:
                        format: uuid4
                        type: string
                      issued_at:
                        description: IssuedAt is the time (UTC) when the flow occurred.
                        format: date-time
                        type: string
                      request_url:
                        description: >-
                          RequestURL is the initial URL that was requested from
                          Ory Kratos. It can be used

                          to forward information contained in the URL's path or query for example.
                        type: string
                      return_to:
                        description: ReturnTo contains the requested return_to URL.
                        type: string
                      type:
                        description: The flow type can either be `api` or `browser`.
                        title: Type is the flow type.
                        type: string
                      ui:
                        description: Container represents a HTML Form. The container can work with both
                          HTTP Form and JSON requests
                        example:
                          nodes:
                            - meta:
                                label:
                                  context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              messages:
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              type: text
                              group: default
                            - meta:
                                label:
                                  context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              messages:
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                                - context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              type: text
                              group: default
                          method: method
                          action: action
                          messages:
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                        properties:
                          action:
                            description: Action should be used as the form action URL `<form action="{{
                              .Action }}" method="post">`.
                            type: string
                          messages:
                            items:
                              example:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                              properties:
                                context:
                                  description: The message's context. Useful when customizing messages.
                                  type: object
                                id:
                                  format: int64
                                  type: integer
                                text:
                                  description: The message text. Written in american english.
                                  type: string
                                type:
                                  type: string
                              required:
                                - id
                                - text
                                - type
                              type: object
                            type: array
                          method:
                            description: Method is the form method (e.g. POST)
                            type: string
                          nodes:
                            items:
                              description: >-
                                Nodes are represented as HTML elements or their
                                native UI equivalents. For example,

                                a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
                              example:
                                meta:
                                  label:
                                    context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                messages:
                                  - context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                  - context: "{}"
                                    id: 0
                                    text: text
                                    type: type
                                type: text
                                group: default
                              properties:
                                attributes:
                                  discriminator:
                                    mapping:
                                      a: "#/uiNodeAnchorAttributes"
                                      img: "#/uiNodeImageAttributes"
                                      input: "#/uiNodeInputAttributes"
                                      script: "#/uiNodeScriptAttributes"
                                      text: "#/uiNodeTextAttributes"
                                    propertyName: node_type
                                  oneOf:
                                    - description: InputAttributes represents the attributes of an input node
                                      properties:
                                        disabled:
                                          description: Sets the input's disabled field to true or false.
                                          type: boolean
                                        label:
                                          $ref: "#/paths/~1self-service~1login~1browser/get/responses/200/content/applica\
                                            tion~1json/schema/anyOf/1/propertie\
                                            s/ui/properties/messages/items"
                                        name:
                                          description: The input's element name.
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "input".
                                          type: string
                                        onclick:
                                          description: >-
                                            OnClick may contain javascript which
                                            should be executed on click. This is
                                            primarily

                                            used for WebAuthn.
                                          type: string
                                        pattern:
                                          description: The input's pattern.
                                          type: string
                                        required:
                                          description: Mark this input field as required.
                                          type: boolean
                                        type:
                                          type: string
                                        value:
                                          description: The input's value.
                                          nullable: true
                                      required:
                                        - disabled
                                        - name
                                        - node_type
                                        - type
                                      type: object
                                    - properties:
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "text".
                                          type: string
                                        text:
                                          $ref: "#/paths/~1self-service~1login~1browser/get/responses/200/content/applica\
                                            tion~1json/schema/anyOf/1/propertie\
                                            s/ui/properties/messages/items"
                                      required:
                                        - id
                                        - node_type
                                        - text
                                      title: TextAttributes represents the attributes of a text node.
                                      type: object
                                    - properties:
                                        height:
                                          description: Height of the image
                                          format: int64
                                          type: integer
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "img".
                                          type: string
                                        src:
                                          description: |-
                                            The image's source URL.
                                            format: uri
                                          type: string
                                        width:
                                          description: Width of the image
                                          format: int64
                                          type: integer
                                      required:
                                        - height
                                        - id
                                        - node_type
                                        - src
                                        - width
                                      title: ImageAttributes represents the attributes of an image node.
                                      type: object
                                    - properties:
                                        href:
                                          description: |-
                                            The link's href (destination) URL.
                                            format: uri
                                          type: string
                                        id:
                                          description: A unique identifier
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "a".
                                          type: string
                                        title:
                                          $ref: "#/paths/~1self-service~1login~1browser/get/responses/200/content/applica\
                                            tion~1json/schema/anyOf/1/propertie\
                                            s/ui/properties/messages/items"
                                      required:
                                        - href
                                        - id
                                        - node_type
                                        - title
                                      title: AnchorAttributes represents the attributes of an anchor node.
                                      type: object
                                    - properties:
                                        async:
                                          description: The script async type
                                          type: boolean
                                        crossorigin:
                                          description: The script cross origin policy
                                          type: string
                                        id:
                                          description: A unique identifier
                                          type: string
                                        integrity:
                                          description: The script's integrity hash
                                          type: string
                                        node_type:
                                          description: >-
                                            NodeType represents this node's
                                            types. It is a mirror of `node.type`
                                            and

                                            is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
                                          type: string
                                        nonce:
                                          description: >-
                                            Nonce for CSP

                                            A nonce you may want to use to improve your Content Security Policy.

                                            You do not have to use this value but if you want to improve your CSP

                                            policies you may use it. You can also choose to use your own nonce value!
                                          type: string
                                        referrerpolicy:
                                          description: The script referrer policy
                                          type: string
                                        src:
                                          description: The script source
                                          type: string
                                        type:
                                          description: The script MIME type
                                          type: string
                                      required:
                                        - async
                                        - crossorigin
                                        - id
                                        - integrity
                                        - node_type
                                        - nonce
                                        - referrerpolicy
                                        - src
                                        - type
                                      title: ScriptAttributes represent script nodes which load javascript.
                                      type: object
                                  title: Attributes represents a list of attributes (e.g. `href="foo"` for links).
                                group:
                                  description: Group specifies which group (e.g. password authenticator) this node
                                    belongs to.
                                  enum:
                                    - default
                                    - password
                                    - oidc
                                    - profile
                                    - link
                                    - totp
                                    - lookup_secret
                                    - webauthn
                                  type: string
                                messages:
                                  items:
                                    $ref: "#/paths/~1self-service~1login~1browser/get/responses/200/content/applica\
                                      tion~1json/schema/anyOf/1/properties/ui/p\
                                      roperties/messages/items"
                                  type: array
                                meta:
                                  description: >-
                                    This might include a label and other
                                    information that can optionally

                                    be used to render UIs.
                                  example:
                                    label:
                                      context: "{}"
                                      id: 0
                                      text: text
                                      type: type
                                  properties:
                                    label:
                                      $ref: "#/paths/~1self-service~1login~1browser/get/responses/200/content/applica\
                                        tion~1json/schema/anyOf/1/properties/ui\
                                        /properties/messages/items"
                                  title: A Node's Meta Information
                                  type: object
                                type:
                                  description: The node's type
                                  enum:
                                    - text
                                    - input
                                    - img
                                    - a
                                    - script
                                  type: string
                              required:
                                - attributes
                                - group
                                - messages
                                - meta
                                - type
                              title: Node represents a flow's nodes
                              type: object
                            type: array
                        required:
                          - action
                          - method
                          - nodes
                        type: object
                    required:
                      - expires_at
                      - id
                      - issued_at
                      - request_url
                      - type
                      - ui
                    type: object
        "303":
          description: Redirect to `urls.default_redirect_url` as a valid user session
            already exists for the HTTP cookie.
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                  ication~1json/schema"
      x-accepts: application/json
      tags:
        - authentication
      servers:
        - url: https://auth.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  /self-service/login:
    post:
      operationId: bouncer:login
      summary: Submit Login Flow
      description: >-
        Use this endpoint to complete a login flow. This endpoint behaves
        differently for API and browser flows, similar to the registration
        endpoint.


        API flow:
          - An API flow expects `application/json` to be sent in the request body and the Content-Type header to be set accordingly.

          - On success it responses with `200 OK` and an application/json body with the session Token.

          - If the request body is invalid, hence the validations fails, a `400 Bad Request` error is returned.

          - If the flow expired, a `410 Gone` response is returned, with the appropriate error message set.

        Browser flow:
          - Browser flows expects Content-Type and Accepts headers of `application/json`.

          - The request body must contain a valid `csrf_token`

          - On success, a `200 OK` response is returned with a body containing the the session and identitiy information on the logged in user. The response also contains a `Set-Cookie` header.

          - If the flow expired, it responds with `303 See Other`. Call the /self-service/login/browser endpoint again to get a new flow.

          - If the request body is invalid, hence the validations fails, a `400 Bad Request` error is returned.

        Extract `session.id` as it's your session token. You can now authorize requests by setting the `Authorize: Bearer <session token>` header on requests.
      parameters:
        - name: flow
          in: query
          explode: true
          required: true
          schema:
            type: string
          description: The Login flow ID as an URL Query parameters
      requestBody:
        description: >-
          You have to specify a `password` in the request body in order to
          login. This is just an restriction from the underlying technologies
          the authentication service is build on. The account_key is the only
          credential. Provide `md5(account_key)` as value for the password
          property.


          Providing `csrf_token` is only required for browser flows. For API flows, request body can left empty.
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  format: uuid
                method:
                  type: string
                  enum:
                    - password
                password:
                  type: string
                csrf_token:
                  type: string
                  minLength: 36
                  maxLength: 36
              required:
                - identifier
                - method
                - password
              example:
                identifier: 34541a31-4648-3a37-16ab-cf948b5ab91e
                method: password
                password: ad6ca394f5af8ae9bc42e1898b7cc767
                csrf_token: NQqU8EgQ7B9Tgq10Ir1xoTlXPSvsvNro0P3a6Tthv8ediy9FlRhSdwnTOBf9Mysk+Dc1wIR8pwF/6oBNrasCXg==
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                title: Bouncer API Session
                type: object
                properties:
                  session:
                    $ref: "#/paths/~1self-service~1registration/post/responses/200/content/applicat\
                      ion~1json/schema/properties/session"
        "303":
          description: Returns the after login redirection url when a browser flow got
            submitted.
        "400":
          description: Form validation error
          content:
            application/json:
              schema:
                description: This object represents a login flow. A login flow is initiated at
                  the "Initiate Login API / Browser Flow"
                example:
                  expires_at: 2000-01-23T04:56:07.000Z
                  ui:
                    nodes:
                      - meta:
                          label:
                            context: "{}"
                            id: 0
                            text: text
                            type: type
                        messages:
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                        type: text
                        group: default
                      - meta:
                          label:
                            context: "{}"
                            id: 0
                            text: text
                            type: type
                        messages:
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                          - context: "{}"
                            id: 0
                            text: text
                            type: type
                        type: text
                        group: default
                    method: method
                    action: action
                    messages:
                      - context: "{}"
                        id: 0
                        text: text
                        type: type
                      - context: "{}"
                        id: 0
                        text: text
                        type: type
                  updated_at: 2000-01-23T04:56:07.000Z
                  created_at: 2000-01-23T04:56:07.000Z
                  refresh: true
                  return_to: return_to
                  type: type
                  issued_at: 2000-01-23T04:56:07.000Z
                  request_url: request_url
                properties:
                  active:
                    description: and so on.
                    enum:
                      - password
                      - totp
                      - oidc
                      - webauthn
                      - lookup_secret
                    title: CredentialsType  represents several different credential types, like
                      password credentials, passwordless credentials,
                    type: string
                  created_at:
                    format: date-time
                    type: string
                  expires_at:
                    format: date-time
                    type: string
                  id:
                    format: uuid4
                    type: string
                  issued_at:
                    description: IssuedAt is the time (UTC) when the flow started.
                    format: date-time
                    type: string
                  refresh:
                    description: Refresh stores whether this login flow should enforce
                      re-authentication.
                    type: boolean
                  request_url:
                    description: >-
                      RequestURL is the initial URL that was requested from Ory
                      Kratos. It can be used

                      to forward information contained in the URL's path or query for example.
                    type: string
                  return_to:
                    description: ReturnTo contains the requested return_to URL.
                    type: string
                  type:
                    description: The flow type can either be `api` or `browser`.
                    title: Type is the flow type.
                    type: string
                  ui:
                    description: Container represents a HTML Form. The container can work with both
                      HTTP Form and JSON requests
                    example:
                      nodes:
                        - meta:
                            label:
                              context: "{}"
                              id: 0
                              text: text
                              type: type
                          messages:
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                          type: text
                          group: default
                        - meta:
                            label:
                              context: "{}"
                              id: 0
                              text: text
                              type: type
                          messages:
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                            - context: "{}"
                              id: 0
                              text: text
                              type: type
                          type: text
                          group: default
                      method: method
                      action: action
                      messages:
                        - context: "{}"
                          id: 0
                          text: text
                          type: type
                        - context: "{}"
                          id: 0
                          text: text
                          type: type
                    properties:
                      action:
                        description: Action should be used as the form action URL `<form action="{{
                          .Action }}" method="post">`.
                        type: string
                      messages:
                        items:
                          example:
                            context: "{}"
                            id: 0
                            text: text
                            type: type
                          properties:
                            context:
                              description: The message's context. Useful when customizing messages.
                              type: object
                            id:
                              format: int64
                              type: integer
                            text:
                              description: The message text. Written in american english.
                              type: string
                            type:
                              type: string
                          required:
                            - id
                            - text
                            - type
                          type: object
                        type: array
                      method:
                        description: Method is the form method (e.g. POST)
                        type: string
                      nodes:
                        items:
                          description: >-
                            Nodes are represented as HTML elements or their
                            native UI equivalents. For example,

                            a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
                          example:
                            meta:
                              label:
                                context: "{}"
                                id: 0
                                text: text
                                type: type
                            messages:
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                              - context: "{}"
                                id: 0
                                text: text
                                type: type
                            type: text
                            group: default
                          properties:
                            attributes:
                              discriminator:
                                mapping:
                                  a: "#/uiNodeAnchorAttributes"
                                  img: "#/uiNodeImageAttributes"
                                  input: "#/uiNodeInputAttributes"
                                  script: "#/uiNodeScriptAttributes"
                                  text: "#/uiNodeTextAttributes"
                                propertyName: node_type
                              oneOf:
                                - description: InputAttributes represents the attributes of an input node
                                  properties:
                                    disabled:
                                      description: Sets the input's disabled field to true or false.
                                      type: boolean
                                    label:
                                      $ref: "#/paths/~1self-service~1login/post/responses/400/content/application~1js\
                                        on/schema/properties/ui/properties/mess\
                                        ages/items"
                                    name:
                                      description: The input's element name.
                                      type: string
                                    node_type:
                                      description: >-
                                        NodeType represents this node's types.
                                        It is a mirror of `node.type` and

                                        is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "input".
                                      type: string
                                    onclick:
                                      description: >-
                                        OnClick may contain javascript which
                                        should be executed on click. This is
                                        primarily

                                        used for WebAuthn.
                                      type: string
                                    pattern:
                                      description: The input's pattern.
                                      type: string
                                    required:
                                      description: Mark this input field as required.
                                      type: boolean
                                    type:
                                      type: string
                                    value:
                                      description: The input's value.
                                      nullable: true
                                  required:
                                    - disabled
                                    - name
                                    - node_type
                                    - type
                                  type: object
                                - properties:
                                    id:
                                      description: A unique identifier
                                      type: string
                                    node_type:
                                      description: >-
                                        NodeType represents this node's types.
                                        It is a mirror of `node.type` and

                                        is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "text".
                                      type: string
                                    text:
                                      $ref: "#/paths/~1self-service~1login/post/responses/400/content/application~1js\
                                        on/schema/properties/ui/properties/mess\
                                        ages/items"
                                  required:
                                    - id
                                    - node_type
                                    - text
                                  title: TextAttributes represents the attributes of a text node.
                                  type: object
                                - properties:
                                    height:
                                      description: Height of the image
                                      format: int64
                                      type: integer
                                    id:
                                      description: A unique identifier
                                      type: string
                                    node_type:
                                      description: >-
                                        NodeType represents this node's types.
                                        It is a mirror of `node.type` and

                                        is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "img".
                                      type: string
                                    src:
                                      description: |-
                                        The image's source URL.
                                        format: uri
                                      type: string
                                    width:
                                      description: Width of the image
                                      format: int64
                                      type: integer
                                  required:
                                    - height
                                    - id
                                    - node_type
                                    - src
                                    - width
                                  title: ImageAttributes represents the attributes of an image node.
                                  type: object
                                - properties:
                                    href:
                                      description: |-
                                        The link's href (destination) URL.
                                        format: uri
                                      type: string
                                    id:
                                      description: A unique identifier
                                      type: string
                                    node_type:
                                      description: >-
                                        NodeType represents this node's types.
                                        It is a mirror of `node.type` and

                                        is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "a".
                                      type: string
                                    title:
                                      $ref: "#/paths/~1self-service~1login/post/responses/400/content/application~1js\
                                        on/schema/properties/ui/properties/mess\
                                        ages/items"
                                  required:
                                    - href
                                    - id
                                    - node_type
                                    - title
                                  title: AnchorAttributes represents the attributes of an anchor node.
                                  type: object
                                - properties:
                                    async:
                                      description: The script async type
                                      type: boolean
                                    crossorigin:
                                      description: The script cross origin policy
                                      type: string
                                    id:
                                      description: A unique identifier
                                      type: string
                                    integrity:
                                      description: The script's integrity hash
                                      type: string
                                    node_type:
                                      description: >-
                                        NodeType represents this node's types.
                                        It is a mirror of `node.type` and

                                        is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
                                      type: string
                                    nonce:
                                      description: >-
                                        Nonce for CSP

                                        A nonce you may want to use to improve your Content Security Policy.

                                        You do not have to use this value but if you want to improve your CSP

                                        policies you may use it. You can also choose to use your own nonce value!
                                      type: string
                                    referrerpolicy:
                                      description: The script referrer policy
                                      type: string
                                    src:
                                      description: The script source
                                      type: string
                                    type:
                                      description: The script MIME type
                                      type: string
                                  required:
                                    - async
                                    - crossorigin
                                    - id
                                    - integrity
                                    - node_type
                                    - nonce
                                    - referrerpolicy
                                    - src
                                    - type
                                  title: ScriptAttributes represent script nodes which load javascript.
                                  type: object
                              title: Attributes represents a list of attributes (e.g. `href="foo"` for links).
                            group:
                              description: Group specifies which group (e.g. password authenticator) this node
                                belongs to.
                              enum:
                                - default
                                - password
                                - oidc
                                - profile
                                - link
                                - totp
                                - lookup_secret
                                - webauthn
                              type: string
                            messages:
                              items:
                                $ref: "#/paths/~1self-service~1login/post/responses/400/content/application~1js\
                                  on/schema/properties/ui/properties/messages/i\
                                  tems"
                              type: array
                            meta:
                              description: >-
                                This might include a label and other information
                                that can optionally

                                be used to render UIs.
                              example:
                                label:
                                  context: "{}"
                                  id: 0
                                  text: text
                                  type: type
                              properties:
                                label:
                                  $ref: "#/paths/~1self-service~1login/post/responses/400/content/application~1js\
                                    on/schema/properties/ui/properties/messages\
                                    /items"
                              title: A Node's Meta Information
                              type: object
                            type:
                              description: The node's type
                              enum:
                                - text
                                - input
                                - img
                                - a
                                - script
                              type: string
                          required:
                            - attributes
                            - group
                            - messages
                            - meta
                            - type
                          title: Node represents a flow's nodes
                          type: object
                        type: array
                    required:
                      - action
                      - method
                      - nodes
                    type: object
                  updated_at:
                    description: UpdatedAt is a helper struct field for gobuffalo.pop.
                    format: date-time
                    type: string
                required:
                  - expires_at
                  - id
                  - issued_at
                  - request_url
                  - type
                  - ui
                title: Login Flow
                type: object
        "410":
          description: Flow invalid for the operation
          content:
            application/json:
              schema:
                $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                  ication~1json/schema"
        "422":
          description: Browser redirection required
          content:
            application/json:
              schema:
                properties:
                  code:
                    description: The status code
                    example: 404
                    format: int64
                    type: integer
                  debug:
                    description: |-
                      Debug information
                      This field is often not exposed to protect against leaking
                      sensitive information.
                    example: SQL field "foo" is not a bool.
                    type: string
                  details:
                    additionalProperties: true
                    description: Further error details
                    type: object
                  id:
                    description: >-
                      The error ID

                      Useful when trying to identify various errors in application logic.
                    type: string
                  message:
                    description: |-
                      Error message
                      The error's message.
                    example: The resource could not be found
                    type: string
                  reason:
                    description: A human-readable reason for the error
                    example: User with ID 1234 does not exist.
                    type: string
                  redirect_browser_to:
                    description: Since when the flow has expired
                    type: string
                  request:
                    description: >-
                      The request ID

                      The request ID is often exposed internally in order to trace

                      errors across service architectures. This is often a UUID.
                    example: d7ef54b1-ec15-46e6-bccb-524b82c035e6
                    type: string
                  status:
                    description: The status description
                    example: Not Found
                    type: string
                required:
                  - message
                title: Is sent when a flow requires a browser to change its location.
                type: object
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                  ication~1json/schema"
      x-accepts: application/json
      x-contentType: application/json
      tags:
        - authentication
      servers:
        - url: https://auth.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  /self-service/logout/api:
    delete:
      operationId: bouncer:logout:api
      summary: API user logout
      description: >-
        This endpoints logs a user out, using the provided session token. If the
        session token was successfully revoked,

        the server returns a 204 No Content response. A 204 No Content is reponse is also sent when the session token has been already revoked.


        If the session token is malformed or does not exists a 403 Forbidden response is returned.


        This endpoint is only intended for API applications, as it does not remove any HTTP Cookies. Use the Browser logout instead.
      requestBody:
        content:
          application/json:
            schema:
              description: nolint:deadcode,unused
              properties:
                session_token:
                  description: |-
                    The Session Token
                    Invalidate this session token.
                  type: string
              required:
                - session_token
              type: object
              example:
                session_token: 25a9898c-216c-4d41-96ab-6fe07c0bf1fc
        required: true
        x-originalParamName: Body
      responses:
        "204":
          description: Logout successfull
        "403":
          description: Invalid Session Token for Logout
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                      ication~1json/schema"
                  - example:
                      error:
                        code: 403
                        status: Forbidden
                        message: The requested action was forbidden
                        reason: The provided Ory Session Token could not be found, is invalid, or
                          otherwise malformed.
        "500":
          description: Internal Service Error
          content:
            application/json:
              schema:
                $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                  ication~1json/schema"
      x-contentType: application/json
      x-accepts: application/json
      tags:
        - authentication
      servers:
        - url: https://auth.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  /self-service/logout/browser:
    get:
      summary: Initiate logout flow for browser
      operationId: bouncer:initLogout:browser
      description: >-
        This endpoint initializes a browser-based user logout flow and a URL
        which can be used to log out the user.


        The request must provide an Accepts headers of `application/json`


        This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Session Token. The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.


        When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
      parameters:
        - description: |-
            HTTP Cookies
            If you call this endpoint from a backend, please include the
            original Cookie header in the request.
          explode: false
          in: header
          name: cookie
          required: false
          schema:
            type: string
          style: simple
      responses:
        "200":
          description: Return successfully created browser logout Flow
          content:
            application/json:
              schema:
                title: Bouncer logout URL
                type: object
                properties:
                  logout_token:
                    description: LogoutToken can be used to perform logout using AJAX.
                    type: string
                  logout_url:
                    description: |-
                      LogoutURL can be opened in a browser to sign the user out.
                      format: uri
                    type: string
                required:
                  - logout_token
                  - logout_url
                example:
                  logout_url: ttps://auth.api.live.mindtastic.lol/self-service/logout?token=iYjs7NWRsQ5AwFETpMqNMrgu82iI8EAX
                  logout_token: iYjs7NWRsQ5AwFETpMqNMrgu82iI8EAX
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                      ication~1json/schema"
                  - example:
                      error:
                        id: session_inactive
                        code: 401
                        status: Unauthorized
                        reason: No active session was found in this request.
                        message: request does not have a valid authentication session
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                  ication~1json/schema"
      x-accepts: application/json
      tags:
        - authentication
      servers:
        - url: https://auth.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  /self-service/logout:
    get:
      summary: Submit Browser Logout
      operationId: bouncer:logout:browser
      description: >-
        This endpoint logs out an identity in a self-service manner.


        If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.


        If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.


        This endpoint is NOT INTENDED for API clients and only works

        with browsers (Chrome, Firefox, ...). For API clients you can

        call the `/self-service/logout/api` URL directly with the Ory Session Token.
      parameters:
        - name: token
          in: query
          required: false
          explode: true
          schema:
            type: string
          style: form
          description: >-
            A Valid Logout Token


            If you do not have a logout token because you only have a session cookie,

            call `/self-service/logout/browser`
        - name: return_to
          in: query
          required: false
          schema:
            type: string
          style: form
          description: The URL to return to after the logout was completed.
      responses:
        "204":
          description: Logout succesfull
        "303":
          description: Redirection after successfull logout
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/paths/~1self-service~1registration~1api/get/responses/500/content/appl\
                  ication~1json/schema"
      x-accepts: application/json
      tags:
        - authentication
      servers:
        - url: https://auth.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  /user:
    get:
      summary: Get data of current user
      operationId: user:data:get
      description: |-
        Get the data of the currently logged in user.

        Data are initialized on first request with default values or are empty.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: User Data Response
                type: object
                properties:
                  username:
                    title: Username
                    type: string
                  role:
                    title: RoleEnum
                    enum:
                      - admin
                      - user
                    type: string
                    description: An enumeration of roles.
                  email:
                    title: EMail Adress of user
                    type: string
                  settings:
                    title: User Settings
                    type: object
                    properties:
                      language:
                        title: Users preferred language
                        type: string
                        enum:
                          - de
                          - en
                    description: Stores the users settings
                    example:
                      language: de
                example:
                  username: maja
                  role: user
                  email: maja@example.com
                  settings:
                    language: de
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      x-accepts: application/json
      x-tira: true
      security:
        - jwt: []
      tags:
        - user-service
    put:
      summary: Update data of the authenticated user
      operationId: user:data:update
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateUserModel
              type: object
              properties:
                username:
                  title: Username
                  type: string
                role:
                  title: RoleEnum
                  enum:
                    - admin
                    - user
                  type: string
                  description: An enumeration of roles.
                email:
                  type: string
                settings:
                  title: User Settings
                  type: object
                  properties:
                    language:
                      title: Users preferred language
                      type: string
                      enum:
                        - de
                        - en
                  description: Stores the users settings
                  example:
                    language: de
              example:
                email: maja.new@example.com
                settings:
                  lang: de
      responses:
        "200":
          description: User data successfully updated. Returns the new user data object
            with changes applied
          content:
            application/json:
              schema:
                $ref: "#/paths/~1user/get/responses/200/content/application~1json/schema"
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable entity. Validation of request body failed.
          content:
            application/json:
              schema:
                title: ValidationError
                required:
                  - loc
                  - msg
                  - type
                type: object
                properties:
                  loc:
                    title: Location
                    type: array
                    items:
                      type: string
                  msg:
                    title: Message
                    type: string
                  type:
                    title: Error Type
                    type: string
                example:
                  loc:
                    - body
                  msg: field required
                  type: value_error.missing
        "500":
          description: Internal server error
      x-accepts: application/json
      x-contentType: application/json
      security:
        - jwt: []
      tags:
        - user-service
    delete:
      summary: Delete data of the authenticated user
      description: >-
        This endpoints deletes all individual user data and settings.


        On the next request of an authenticated user, the data with default values will become reinitialized.


        On success, the endpoint returns a `204 No Content` response with no body.
      operationId: user:data:delete
      responses:
        "204":
          description: User data deleted.
        "500":
          description: Internal Server Error
      security:
        - jwt: []
      tags:
        - user-service
    servers:
      - url: https://users.api.{environment}.mindtastic.lol
        variables:
          environment:
            enum:
              - live
              - stage
              - dev
            default: live
  /admin/user:
    get:
      summary: Get all users.
      description: >-
        This endpoint returns all users with settings stored.


        The endpoint is only accessible by administrators and considered **unstable**.
      operationId: user:admin:getAll
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/paths/~1user/put/requestBody/content/application~1json/schema"
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/paths/~1user/get/responses/200/content/application~1json/schema"
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      tags:
        - user-service
      x-accepts: application/json
    post:
      summary: Create user.
      description: >-
        Creates a user with provided request data.


        The ID comes from a header that will be dropped by the API gateway. Therefore, user creation is only

        accessible from inside the service mesh.


        The endpoint is only accessible by administrators and considered **unstable**.
      operationId: user:admin:create
      deprecated: true
      parameters:
        - name: X-User-Id
          in: header
          required: true
          schema:
            type: string
            format: uuid
          description: >-
            The service specific user id of the user to create.


            **Caution:**

            The user id MUST NOT be the users account key nor a authentication session token.
          example: 7f036688-36c2-4d73-80c7-a820fcf156a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/paths/~1user/put/requestBody/content/application~1json/schema"
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      x-contentType: application/json
      tags:
        - user-service
    servers:
      - url: https://users.api.{environment}.mindtastic.lol
        variables:
          environment:
            enum:
              - live
              - stage
              - dev
            default: live
  /diary:
    get:
      summary: Get mood diary by userId.
      description: Get the mood diary for the currently authenticated user.
      operationId: diary:mood:getMany
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: Mood List Entries
                type: array
                items:
                  title: Mood Object
                  type: object
                  allOf:
                    - type: object
                      properties:
                        id:
                          type: integer
                          nullable: false
                      required:
                        - id
                      example:
                        id: 2143
                    - type: object
                      title: Mood Data Object
                      properties:
                        mood_day:
                          oneOf:
                            - type: string
                              format: date
                            - type: string
                              format: date-time
                        mood_type:
                          type: string
                          enum:
                            - positive
                            - negative
                            - neutral
                        mood_descr:
                          type: string
                      required:
                        - mood_day
                        - mood_type
                      example:
                        mood_day: 2022-07-24
                        mood_type: negative
                        mood_descr: So called semester break. Lol.
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      x-accepts: application/json
      x-tira: true
      tags:
        - mood-diary-service
      security:
        - jwt: []
    post:
      summary: Add mood to diary
      description: Add mood to user's diary.
      operationId: diary:mood:create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: Mood Data Object
              properties:
                mood_day:
                  oneOf:
                    - type: string
                      format: date
                    - type: string
                      format: date-time
                mood_type:
                  type: string
                  enum:
                    - positive
                    - negative
                    - neutral
                mood_descr:
                  type: string
              required:
                - mood_day
                - mood_type
              example:
                mood_day: 2022-07-24
                mood_type: negative
                mood_descr: So called semester break. Lol.
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                title: Mood Object
                type: object
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        nullable: false
                    required:
                      - id
                    example:
                      id: 2143
                  - type: object
                    title: Mood Data Object
                    properties:
                      mood_day:
                        oneOf:
                          - type: string
                            format: date
                          - type: string
                            format: date-time
                      mood_type:
                        type: string
                        enum:
                          - positive
                          - negative
                          - neutral
                      mood_descr:
                        type: string
                    required:
                      - mood_day
                      - mood_type
                    example:
                      mood_day: 2022-07-24
                      mood_type: negative
                      mood_descr: So called semester break. Lol.
        "401":
          description: Unauthorized
        "422":
          description: |-
            Unprocessable entity.

            The request data validation failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
                example:
                  error: mood_day must be a valid ISO 8601 or RFC 2822 timestamp
        "500":
          description: Internal Server Error
      x-contentType: application/json
      x-accepts: application/json
      x-tira: true
      tags:
        - mood-diary-service
      security:
        - jwt: []
    servers:
      - url: https://diary.api.{environment}.mindtastic.lol
        variables:
          environment:
            enum:
              - live
              - stage
              - dev
            default: live
  "/diary/{id}":
    get:
      summary: Fetch single mood diary entry
      operationId: diary:mood:get
      description: >-
        Endpoint returns a single moodd diary entry by it's ID (passed as an URL
        parameter)


        If the user is not authenticated at all, the endpoint will return `401 Forbidden`.


        If the user is authenticated, tries to access an mood diary entry that does not exists or not belongs to them, a `404 Not Found` is returned.

        parameters:
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            nullable: false
          required: true
          description: ID of the mood diary entry the user wants to perform a request on
          example: 2143
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/paths/~1diary/post/responses/201/content/application~1json/schema"
        "401":
          description: Unauthorized
        "404":
          description: Mood diary entry with provided id not found
        "500":
          description: Internal server error
      x-tira: true
      tags:
        - mood-diary-service
      security:
        - jwt: []
    put:
      summary: Update a single mood diary entry
      operationId: diary:mood:update
      description: >-
        Use this endpoint to update a mood diary entry.


        You have to provide a full Mood Data Object. On success, a `204 No Content` response with body is returned.


        If the provided request body is invalid, a `422 Unprocessable Entity` error is returned.
      parameters:
        - $ref: "#/paths/~1diary~1%7Bid%7D/get/parameters/0"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/paths/~1diary/post/requestBody/content/application~1json/schema"
      responses:
        "204":
          description: Mood diary entry updated successfully.
        "401":
          description: Unauthorized
        "404":
          description: Mood diary entry with provided id not found
        "422":
          description: |-
            Unprocessable entity.

            The request data validation failed.
          content:
            application/json:
              schema:
                $ref: "#/paths/~1diary/post/responses/422/content/application~1json/schema"
        "500":
          description: Internal server error
      x-tira: true
      tags:
        - mood-diary-service
      security:
        - jwt: []
    delete:
      summary: Delete single mood diary entry
      operationId: diary:mood:delete
      description: >-
        Use this endpoint to delete a single entry from a users mood diary by
        it's userId.


        On success a `204 No Content` response with body is returned.
      parameters:
        - $ref: "#/paths/~1diary~1%7Bid%7D/get/parameters/0"
      responses:
        "204":
          description: Mood diary entry deleted successfully.
        "401":
          description: Unauthorized
        "404":
          description: Mood diary entry with provided id not found
        "500":
          description: Internal server error
      x-tira: true
      tags:
        - mood-diary-service
      security:
        - jwt: []
    servers:
      - url: https://diary.api.{environment}.mindtastic.lol
        variables:
          environment:
            enum:
              - live
              - stage
              - dev
            default: live
  /motivator:
    get:
      summary: Get motivators for authenticated user
      operationId: motivator:get
      description: >-
        This endpoint returns all motivators that should be available to the
        user in the frontend.


        A *motivator* is a generic exercise, that displays different type of contexts and eventually offers input elements. 
      responses:
        "200":
          description: >-
            OK. A list of avaiable motivator exercises for the currently
            authenticated user is returned.


            The content to display is presented in `content` as ordered array. Each element should be displayed in the order of occurence in the array.


            If a content object has the type input, it returns an `id` of an input object presented in `inputs`. Each input object offers one or more so called fields. A field is an individual, configurable input type. You can think of an input as a HTML form, which also consists out of multiple input elements and then submits all user inputs to the server.


            See the `POST /motivator/result` endpoint on how to send user inputs to the server.
          content:
            application/json:
              schema:
                title: Motivator List
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 5
                        name:
                          type: string
                          minLength: 1
                          maxLength: 255
                          example: Mindfulness motivator
                        headline:
                          type: string
                          minLength: 1
                          maxLength: 255
                          example: Calm your Headspace with Ease
                        description:
                          type: string
                          example: Long read. Nobodys got time for that nowadays.
                        created_at:
                          type: string
                          format: date-time
                        modified_at:
                          type: string
                          format: date-time
                    - title: Motivator
                      properties:
                        content:
                          type: array
                          items:
                            oneOf:
                              - type: object
                                properties:
                                  type:
                                    type: string
                                  url:
                                    type: string
                                    format: uri
                                required:
                                  - type
                                  - url
                                example:
                                  type: image
                                  url: https://http.cat/420
                              - type: object
                                properties:
                                  type:
                                    type: string
                                  text:
                                    type: string
                                    description: The text that should be presented to the motivator user in markdown
                                      format.
                                required:
                                  - type
                                  - text
                                example:
                                  type: text
                                  text: |-
                                    # Drill Sergeant

                                    Most definitly a *Starkmacher*.
                              - type: object
                                properties:
                                  type:
                                    type: string
                                required:
                                  - type
                                example:
                                  type: pagebreak
                              - type: object
                                properties:
                                  type:
                                    type: string
                                  url:
                                    type: string
                                    format: uri
                                required:
                                  - type
                                  - url
                                example:
                                  type: video
                                  url: https://rroll.to/riSv29
                              - type: object
                                properties:
                                  type:
                                    type: string
                                  inputId:
                                    type: integer
                                required:
                                  - type
                                  - inputId
                                example:
                                  type: input
                                  inputId: 5
                            discriminator:
                              propertyName: type
                              mapping:
                                text: "#/textContent"
                                image: "#/imageContent"
                                video: "#/videoContent"
                                input: "#/inputContent"
                                pagebreak: "#/pageBreakContent"
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 5
                              fields:
                                type: object
                                additionalProperties:
                                  oneOf:
                                    - type: object
                                      properties:
                                        inputType:
                                          type: string
                                        label:
                                          type: string
                                          description: A string the input field shall be captioned with.
                                        maxLength:
                                          type: integer
                                          description: Optional value for the maximum allowed length for the text input
                                      required:
                                        - inputType
                                        - label
                                      example:
                                        inputType: text
                                        label: What's the elephant in the room?
                                      description: >-
                                        A free text input.


                                        Tells the frontend to display an free text input field (like `<input type="text">` in HTML).
                                    - type: object
                                      properties:
                                        inputType:
                                          type: string
                                        label:
                                          type: string
                                          description: A string the range input shall be captioned with
                                        options:
                                          type: object
                                          properties:
                                            minValue:
                                              type: integer
                                              default: 0
                                            maxValue:
                                              type: integer
                                              default: 100
                                            stepSize:
                                              type: integer
                                              default: 1
                                          description: An object that configures the range input
                                      required:
                                        - inputType
                                        - label
                                        - range
                                      example:
                                        inputType: range
                                        label: On a scale from 1-10. How important is privacy engineering to you?
                                        options:
                                          minValue: 1
                                          maxValue: 10
                                  discriminator:
                                    propertyName: inputType
                                    mapping:
                                      text: "#/MotivatorTextInputElement"
                                      range: "#/MotivatorSliderInputElement"
                                example:
                                  text-question:
                                    inputType: text
                                    label: What's the elephant in the room?
                                  range-rating:
                                    inputType: range
                                    label: On a scale from 1-10. How important is privacy engineering to you?
                                    options:
                                      minValue: 1
                                      maxValue: 10
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      tags:
        - motivator-service
      security:
        - jwt: []
    servers:
      - url: https://motivator.api.{environment}.mindtastic.lol
        variables:
          environment:
            enum:
              - live
              - stage
              - dev
            default: live
  "/motivator/{motivatorId}/result":
    post:
      summary: Add a new result to user's current motivator.
      operationId: motivator:result:add
      description: >-
        This endpoint submits a users result on a motivator exercise.


        A result is basically an array of collected users inputs according to the motivator specification provided by the `GET /motivator` endpoint.


        The user can also submit optional feedback on a motivator with a result response. As collection of free-text comments as part of an evaluation is very sensitive in terms of privacy, this version of the API does not include such an option.


        On success, the endpoint returns a `201 Created` response, with the body containing the `id` of the motivator result and a new `state` for the motivator exercises, as a motivator could consist out of multiple parts. If the return value indicates that a motivator is not fully completed, you should call the `GET` endpoint again, as the content the motivator could have changed.


        If the motivator does not exists or is not available for the current user, a `404 Not Found` response is returned.


        If the validation of the request body against the specified schema fails, or does not match the actual inputs of the motivator, a `422 Unprocessable Entity` response is returned, with the body containing an `error` string with further information.
      parameters:
        - name: motivatorId
          in: path
          schema:
            type: integer
            example: 5
          required: true
          description: The `id` of the motivator you want to add a result for.
      requestBody:
        description: >-
          The result to submit on the motivator. 


          The `values` property acts as a dictionary, containing the IDs referenced in the `input` object in the motivator content. 


          The coressponding value, again is a dictionary of mapping the reference string to objects containing a single `value` property. 


          The type of `value` depends on the individual input type.
        content:
          application/json:
            schema:
              type: object
              properties:
                timestamp:
                  type: string
                  format: date-time
                values:
                  type: object
                  additionalProperties:
                    type: object
                    properties:
                      entries:
                        type: object
                        additionalProperties:
                          type: object
                          properties:
                            value:
                              anyOf:
                                - type: string
                                - type: number
                                - type: integer
                                - type: boolean
                                - type: array
                                - type: object
                              description: The actual value of the input to store. The data format depends on
                                the input.
                          required:
                            - value
                feedback:
                  type: object
                  properties:
                    rating:
                      type: string
                      enum:
                        - positive
                        - neutral
                        - negative
                  required:
                    - rating
              required:
                - timestamp
                - values
              example:
                timestamp: 2022-07-02T20:43:28+0000
                values:
                  "5":
                    entries:
                      text-question:
                        value: Cage the Elephant
                      range-rating:
                        value: 9
                feedback:
                  rating: positive
      responses:
        "201":
          description: Motivator Result stored successfully.
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      resultId:
                        type: integer
                    required:
                      - resultId
                    example:
                      resultId: 2531
                  - type: object
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                          - postponed
                          - failed
                    required:
                      - status
                    example:
                      status: success
        "401":
          description: Unauthorized
        "404":
          description: Motivator with request `motivatorId` does not exists or is not
            available to the currently authorized user.
        "422":
          description: Validation of the request body failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
                example:
                  error: "Expected value type integer on input type range [inputId: 5, fieldRef:
                    range-rating]."
        "500":
          description: Internal Server Error
      tags:
        - motivator-service
      security:
        - jwt: []
    delete:
      summary: Deletes all results on a motivator for the user
      operationId: motivator:result:deleteAll
      description: >-
        This endpoint deletes **all** results on the motivator with the ID
        specified for a given motivator for the currently authenticated user.


        - On success it returns a `204 No content` response without a body.


        - If the motivator with the ID does not exists a `404 Not Found` response is returned.
      responses:
        "204":
          description: Results for motivator with `motivatorId` deletes successfully.
        "404":
          description: The motivator with the given `motivatorId` does not exists.
        "500":
          description: Internal Service Error
      tags:
        - motivator-service
      security:
        - jwt: []
      parameters:
        - name: motivatorId
          in: path
          schema:
            type: integer
          required: true
          description: The ID of the motivator to fetch users results
    servers:
      - url: https://motivator.api.{environment}.mindtastic.lol
        variables:
          environment:
            enum:
              - live
              - stage
              - dev
            default: live
  /safetyNet:
    get:
      summary: Get safety net for the current user
      operationId: motivator:safetyNet:get
      description: >-
        This endpoint returns the current users safety net. A safetyNet is an an
        array of items. How the safety net items are displayed in the UI is left
        to the user. 


        This endpoint is associated with the motivator service, as it's implemented as a motivator exercise internally. However, the safety net motivator is shown in the `GET /motivator` endpoint.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: SafetyNet Object
                type: array
                items:
                  allOf:
                    - properties:
                        id:
                          type: integer
                      required:
                        - id
                      example:
                        id: 2
                    - type: object
                      properties:
                        name:
                          type: string
                          minLength: 1
                        type:
                          type: string
                          minLength: 1
                          enum:
                            - personalStrengths
                            - people
                            - pets
                            - activities
                            - situationControl
                            - relaxation
                            - other
                          description: Which kind of item is this (i.a., influences symbol in UI)?
                        strategies:
                          type: array
                          description: How can this item help the user to feel better? An array of strings
                            describing the strategies.
                          items:
                            type: string
                        feedback:
                          type: array
                          items:
                            type: object
                            title: safetyNetItemFeedback
                            properties:
                              itHelped:
                                type: boolean
                              comment:
                                type: string
                              timestamp:
                                type: string
                                format: date-time
                      required:
                        - name
                        - type
                        - strategies
                      example:
                        name: Theo
                        type: pets
                        strategies:
                          - cuddle
                          - play
                          - go for a walk
                        feedback:
                          itHelped: false
                          comment: Not helpful at all! Theo ate my homework. Now I'm going to get a bad
                            grade in Latin in 6th grade. The beginning of the
                            end. I won't be able to get a good degree, I won't
                            be able to write a master's thesis at ISE, and I'll
                            have take a terrible job after school. Me becoming a
                            beauty influencer is all Theos fault.
                          timestamp: 2021-03-03T03:03:03.3Z
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      x-accepts: application/json
      tags:
        - motivator-service
      security:
        - jwt: []
    post:
      summary: Add safety net item to currently authenticated user safety net.
      description: >-
        Add safety net item to currently authenticated user safety net.


        If the item was added to the users safety net, a `201 Created` response, with the created Item in the body (this contains an `id`).


        If the validation if the requests body fails, a `422 Unprocessable Entity` error is returned, with an error message in the body.
      operationId: motivator:safetyNet:add
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                type:
                  type: string
                  minLength: 1
                  enum:
                    - personalStrengths
                    - people
                    - pets
                    - activities
                    - situationControl
                    - relaxation
                    - other
                  description: Which kind of item is this (i.a., influences symbol in UI)?
                strategies:
                  type: array
                  description: How can this item help the user to feel better? An array of strings
                    describing the strategies.
                  items:
                    type: string
                feedback:
                  type: array
                  items:
                    type: object
                    title: safetyNetItemFeedback
                    properties:
                      itHelped:
                        type: boolean
                      comment:
                        type: string
                      timestamp:
                        type: string
                        format: date-time
              required:
                - name
                - type
                - strategies
              example:
                name: Theo
                type: pets
                strategies:
                  - cuddle
                  - play
                  - go for a walk
                feedback:
                  itHelped: false
                  comment: Not helpful at all! Theo ate my homework. Now I'm going to get a bad
                    grade in Latin in 6th grade. The beginning of the end. I
                    won't be able to get a good degree, I won't be able to write
                    a master's thesis at ISE, and I'll have take a terrible job
                    after school. Me becoming a beauty influencer is all Theos
                    fault.
                  timestamp: 2021-03-03T03:03:03.3Z
      responses:
        "201":
          description: Item succesfully added to users safety net.
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      id:
                        type: integer
                    required:
                      - id
                    example:
                      id: 2
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                      type:
                        type: string
                        minLength: 1
                        enum:
                          - personalStrengths
                          - people
                          - pets
                          - activities
                          - situationControl
                          - relaxation
                          - other
                        description: Which kind of item is this (i.a., influences symbol in UI)?
                      strategies:
                        type: array
                        description: How can this item help the user to feel better? An array of strings
                          describing the strategies.
                        items:
                          type: string
                      feedback:
                        type: array
                        items:
                          type: object
                          title: safetyNetItemFeedback
                          properties:
                            itHelped:
                              type: boolean
                            comment:
                              type: string
                            timestamp:
                              type: string
                              format: date-time
                    required:
                      - name
                      - type
                      - strategies
                    example:
                      name: Theo
                      type: pets
                      strategies:
                        - cuddle
                        - play
                        - go for a walk
                      feedback:
                        itHelped: false
                        comment: Not helpful at all! Theo ate my homework. Now I'm going to get a bad
                          grade in Latin in 6th grade. The beginning of the end.
                          I won't be able to get a good degree, I won't be able
                          to write a master's thesis at ISE, and I'll have take
                          a terrible job after school. Me becoming a beauty
                          influencer is all Theos fault.
                        timestamp: 2021-03-03T03:03:03.3Z
        "401":
          description: Unauthorized
        "422":
          description: Request entity validation failed.
          content:
            application/json:
              schema:
                $ref: "#/paths/~1motivator~1%7BmotivatorId%7D~1result/post/responses/422/conten\
                  t/application~1json/schema"
        "500":
          description: Internal Server Error
      x-accepts: application/json
      x-contentType: application/json
      tags:
        - motivator-service
      security:
        - jwt: []
    servers:
      - url: https://motivator.api.{environment}.mindtastic.lol
        variables:
          environment:
            enum:
              - live
              - stage
              - dev
            default: live
  "/safetyNet/{safetyNetItemId}":
    put:
      summary: Replaces a safety net item with a new one
      operationId: motivator:safetyNet:replace
      description: >-
        This endpoint replaces the item with the provided `safetyNetItemId` with
        the data provided in the request body.


        On successful replacement, a `200 OK` reponse is returned, with the new record provided in the reponse body.


        If the deletion was successful, a `204 No Content` response without body is returned.


        If the validation if the requests body fails, a `422 Unprocessable Entity` error is returned, with an error message in the body.
      parameters:
        - name: safetyNetItemId
          in: path
          schema:
            type: integer
            example: 5421
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/paths/~1safetyNet/post/requestBody/content/application~1json/schema"
      responses:
        "200":
          description: Safety net item successfully updated
          content:
            application/json:
              schema:
                $ref: "#/paths/~1safetyNet/post/responses/201/content/application~1json/schema"
        "401":
          description: Unauthorized
        "404":
          description: Item with provided `safetyNetItemId` does not exists for current
            user.
        "422":
          description: Request entity validation failed.
          content:
            application/json:
              schema:
                $ref: "#/paths/~1motivator~1%7BmotivatorId%7D~1result/post/responses/422/conten\
                  t/application~1json/schema"
        "500":
          description: Internal Server Error
      tags:
        - motivator-service
      security:
        - jwt: []
    delete:
      summary: Deletes an item from users safety net
      operationId: motivator:safetyNet:delete
      description: >-
        This endpoint deletes an item with the specified `id` from the currently
        authenticated users safety net.


        - If the deletion was successful, a `204 No Content` response without body is returned.


        - If there is no safety net item with the given `id` for the current user, it returns a `404 Not Found` response
      parameters:
        - name: safetyNetItemId
          in: path
          schema:
            type: integer
            example: 5421
          required: true
      responses:
        "204":
          description: Item deleted succesfully
        "401":
          description: Unauthorized
        "404":
          description: Item with provided `safetyNetItemId` does not exists for current
            user.
        "500":
          description: Internal Server Error
      tags:
        - motivator-service
      security:
        - jwt: []
    servers:
      - url: https://motivator.api.{environment}.mindtastic.lol
        variables:
          environment:
            enum:
              - live
              - stage
              - dev
            default: live
  /tilt:
    get:
      summary: Get tilt document.
      description: Get tilt document, i.e. a machine-readable privacy policy.
      operationId: get-tilt
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: "A valid tilt document validates against the tilt schema:
                  https://github.com/Transparency-Information-Language/schema/b\
                  lob/master/tilt-schema.json"
                type: object
                x-examples:
                  example-1:
                    meta:
                      _id: f1424f86-ca0f-4f0c-9438-43cc00509931
                      name: Green Company
                      created: 2020-04-03T15:53:05.929588
                      modified: 2020-04-03T15:53:05.929588
                      version: 2
                      language: de
                      status: active
                      url: https://green-bikes.de/privacy
                      _hash: be81d309088dde861ab5fc4d62d4bbfe0aeef3e3baf2f5362c1086f451f0a1e7
                    controller:
                      name: Green Company AG
                      division: Product line e-mobility
                      address: Wolfsburger Ring 2, 38440 Berlin
                      country: DE
                      representative:
                        name: Jane Super
                        email: contact@greencompany.de
                        phone: 0049 151 1234 5678
                    dataProtectionOfficer:
                      name: Jane Super
                      address: Wolfsburger Ring 2, 38440 Berlin
                      country: DE
                      email: contact@greencompany.de
                      phone: 0049 151 1234 5678
                    dataDisclosed:
                      - _id: f1424f86-ca0f-4f0c-9438-43cc00509931
                        category: E-mail address
                        purposes:
                          - purpose: Marketing
                            description: Newsletter will be sent out once a month.
                        legalBases:
                          - reference: GDPR-99-1-a
                            description: The data are processed on the basis of Art. 99 GDPR which states...
                          - reference: BDSG-42-5
                            description: BDSG-42-5 refers to the processing of personal data within...
                        legitimateInterests:
                          - exists: false
                            reasoning: There is an legitimate interest based on ... and is not overwritten
                              because ...
                        recipients:
                          - name: Yellow Company AG
                            division: Product line e-mobility
                            address: Triana 123, 9999 Seville
                            country: ES
                            representative:
                              name: Jane Super
                              email: contact@yellowcompany.de
                              phone: 0049 151 1234 9876
                            category: Marketing content provider
                          - category: Responsible Statistical Institutes
                        storage:
                          - temporal:
                              - description: Creating backups.
                                ttl: P3Y6M4DT12H30M5S
                              - description: Finishing ordering process.
                                ttl: 2020-08-09T18:31:42P3Y6M4DT12H30M17S
                            purposeConditional:
                              - Data is stored until the end of the ordering
                                process.
                            legalBasisConditional:
                              - SGB-100-42
                            aggregationFunction: max
                        nonDisclosure:
                          legalRequirement: false
                          contractualRegulation: false
                          obligationToProvide: false
                          consequences: If the data is not disclosed, the shipment cannot be delivered.
                    thirdCountryTransfers:
                      - country: ES
                        adequacyDecision:
                          available: true
                          description: An adequacy decision was made on the 23rd April 2020 by...
                        appropriateGuarantees:
                          available: true
                          description: Here the appropriate guarantee was formulated by...
                        presenceOfEnforceableRightsAndEffectiveRemedies:
                          available: true
                          description: These rights are given because of...
                        standardDataProtectionClause:
                          available: true
                          description: "The standard data protection clause which applies here can be
                            found here: ..."
                    accessAndDataPortability:
                      available: true
                      description: Data access is possible through...
                      url: https://green-bikes.de/access
                      email: access@greencompany.de
                      identificationEvidences:
                        - ID card copy
                        - Email verification
                      administrativeFee:
                        amount: 0
                        currency: EUR
                      dataFormats:
                        - json
                        - xml
                    sources:
                      - _id: f1423cc00509931
                        dataCategory: Creditworthiness
                        sources:
                          - description: This information could be retrieved from...
                            url: https://blueCompany.org
                            publiclyAvailable: false
                    rightToInformation:
                      available: true
                      description: For the right to information please use this contact form and...
                      url: https://greencompany.org/rightToInformation
                      email: contact@greencompany.de
                      identificationEvidences:
                        - ID card copy
                        - Email verification
                    rightToRectificationOrDeletion:
                      available: true
                      description: For the right to rectification please use this contact form and...
                      url: https://greencompany.org/rights
                      email: contact@greencompany.de
                      identificationEvidences:
                        - ID card copy
                        - Email verification
                    rightToDataPortability:
                      available: false
                      description: Data portability is only possible when...
                      url: https://greencompany.org/rights
                      email: contact@greencompany.de
                      identificationEvidences:
                        - ID card copy
                    rightToWithdrawConsent:
                      available: true
                      description: For the right to withdraw consent please use this contact form
                        and...
                      url: https://greencompany.org/rights
                      email: contact@greencompany.de
                      identificationEvidences:
                        - Email verification
                    rightToComplain:
                      available: true
                      description: For the right to complain please use this contact form and...
                      url: https://greencompany.org/rights
                      email: contact@greencompany.de
                      identificationEvidences:
                        - ID card copy
                        - Email verification
                      supervisoryAuthority:
                        name: Commissioner for Data Protection
                        address: Friedrichstrasse 219, 10969 Berlin
                        country: DE
                        email: mailbox@privacy-berlin.de
                        phone: 0049 444 222 111
                    automatedDecisionMaking:
                      inUse: true
                      logicInvolved: The personal data are processed as follows...
                      scopeAndIntendedEffects: From processing follows...
                    changesOfPurpose:
                      - description: Due to technical requirements...
                        affectedDataCategories:
                          - Email adress
                          - Credit score
                        plannedDateOfChange: 2020-08-20
                        urlOfNewVersion: https://greencomp.de/privacypolicy/2
                properties:
                  meta:
                    type: object
                    properties:
                      _id:
                        type: string
                        minLength: 1
                      name:
                        type: string
                        minLength: 1
                      created:
                        type: string
                        minLength: 1
                      modified:
                        type: string
                        minLength: 1
                      version:
                        type: number
                      language:
                        type: string
                        minLength: 1
                      status:
                        type: string
                        minLength: 1
                      url:
                        type: string
                        minLength: 1
                      _hash:
                        type: string
                        minLength: 1
                  controller:
                    type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                      division:
                        type: string
                        minLength: 1
                      address:
                        type: string
                        minLength: 1
                      country:
                        type: string
                        minLength: 1
                      representative:
                        type: object
                        properties:
                          name:
                            type: string
                            minLength: 1
                          email:
                            type: string
                            minLength: 1
                          phone:
                            type: string
                            minLength: 1
                  dataProtectionOfficer:
                    type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                      address:
                        type: string
                        minLength: 1
                      country:
                        type: string
                        minLength: 1
                      email:
                        type: string
                        minLength: 1
                      phone:
                        type: string
                        minLength: 1
                  dataDisclosed:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          minLength: 1
                        category:
                          type: string
                          minLength: 1
                        purposes:
                          type: array
                          uniqueItems: true
                          minItems: 1
                          items:
                            type: object
                            properties:
                              purpose:
                                type: string
                                minLength: 1
                              description:
                                type: string
                                minLength: 1
                        legalBases:
                          type: array
                          uniqueItems: true
                          minItems: 1
                          items:
                            type: object
                            properties:
                              reference:
                                type: string
                                minLength: 1
                              description:
                                type: string
                                minLength: 1
                        legitimateInterests:
                          type: array
                          uniqueItems: true
                          minItems: 1
                          items:
                            type: object
                            properties:
                              exists:
                                type: boolean
                              reasoning:
                                type: string
                                minLength: 1
                        recipients:
                          type: array
                          uniqueItems: true
                          minItems: 1
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                minLength: 1
                              division:
                                type: string
                                minLength: 1
                              address:
                                type: string
                                minLength: 1
                              country:
                                type: string
                                minLength: 1
                              representative:
                                type: object
                                properties:
                                  name:
                                    type: string
                                    minLength: 1
                                  email:
                                    type: string
                                    minLength: 1
                                  phone:
                                    type: string
                                    minLength: 1
                                required:
                                  - name
                                  - email
                                  - phone
                              category:
                                type: string
                                minLength: 1
                        storage:
                          type: array
                          uniqueItems: true
                          minItems: 1
                          items:
                            type: object
                            properties:
                              temporal:
                                type: array
                                uniqueItems: true
                                minItems: 1
                                items:
                                  type: object
                                  properties:
                                    description:
                                      type: string
                                      minLength: 1
                                    ttl:
                                      type: string
                                      minLength: 1
                                  required:
                                    - description
                                    - ttl
                              purposeConditional:
                                type: array
                                items:
                                  type: object
                              legalBasisConditional:
                                type: array
                                items:
                                  type: object
                              aggregationFunction:
                                type: string
                                minLength: 1
                        nonDisclosure:
                          type: object
                          properties:
                            legalRequirement:
                              type: boolean
                            contractualRegulation:
                              type: boolean
                            obligationToProvide:
                              type: boolean
                            consequences:
                              type: string
                              minLength: 1
                          required:
                            - legalRequirement
                            - contractualRegulation
                            - obligationToProvide
                            - consequences
                  thirdCountryTransfers:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        country:
                          type: string
                          minLength: 1
                        adequacyDecision:
                          type: object
                          properties:
                            available:
                              type: boolean
                            description:
                              type: string
                              minLength: 1
                        appropriateGuarantees:
                          type: object
                          properties:
                            available:
                              type: boolean
                            description:
                              type: string
                              minLength: 1
                        presenceOfEnforceableRightsAndEffectiveRemedies:
                          type: object
                          properties:
                            available:
                              type: boolean
                            description:
                              type: string
                              minLength: 1
                        standardDataProtectionClause:
                          type: object
                          properties:
                            available:
                              type: boolean
                            description:
                              type: string
                              minLength: 1
                  accessAndDataPortability:
                    type: object
                    properties:
                      available:
                        type: boolean
                      description:
                        type: string
                        minLength: 1
                      url:
                        type: string
                        minLength: 1
                      email:
                        type: string
                        minLength: 1
                      identificationEvidences:
                        type: array
                        items:
                          type: object
                      administrativeFee:
                        type: object
                        properties:
                          amount:
                            type: number
                          currency:
                            type: string
                            minLength: 1
                      dataFormats:
                        type: array
                        items:
                          type: object
                  sources:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          minLength: 1
                        dataCategory:
                          type: string
                          minLength: 1
                        sources:
                          type: array
                          uniqueItems: true
                          minItems: 1
                          items:
                            type: object
                            properties:
                              description:
                                type: string
                                minLength: 1
                              url:
                                type: string
                                minLength: 1
                              publiclyAvailable:
                                type: boolean
                  rightToInformation:
                    type: object
                    properties:
                      available:
                        type: boolean
                      description:
                        type: string
                        minLength: 1
                      url:
                        type: string
                        minLength: 1
                      email:
                        type: string
                        minLength: 1
                      identificationEvidences:
                        type: array
                        items:
                          type: object
                  rightToRectificationOrDeletion:
                    type: object
                    properties:
                      available:
                        type: boolean
                      description:
                        type: string
                        minLength: 1
                      url:
                        type: string
                        minLength: 1
                      email:
                        type: string
                        minLength: 1
                      identificationEvidences:
                        type: array
                        items:
                          type: object
                  rightToDataPortability:
                    type: object
                    properties:
                      available:
                        type: boolean
                      description:
                        type: string
                        minLength: 1
                      url:
                        type: string
                        minLength: 1
                      email:
                        type: string
                        minLength: 1
                      identificationEvidences:
                        type: array
                        items:
                          type: object
                  rightToWithdrawConsent:
                    type: object
                    properties:
                      available:
                        type: boolean
                      description:
                        type: string
                        minLength: 1
                      url:
                        type: string
                        minLength: 1
                      email:
                        type: string
                        minLength: 1
                      identificationEvidences:
                        type: array
                        items:
                          type: object
                  rightToComplain:
                    type: object
                    properties:
                      available:
                        type: boolean
                      description:
                        type: string
                        minLength: 1
                      url:
                        type: string
                        minLength: 1
                      email:
                        type: string
                        minLength: 1
                      identificationEvidences:
                        type: array
                        items:
                          type: object
                      supervisoryAuthority:
                        type: object
                        properties:
                          name:
                            type: string
                            minLength: 1
                          address:
                            type: string
                            minLength: 1
                          country:
                            type: string
                            minLength: 1
                          email:
                            type: string
                            minLength: 1
                          phone:
                            type: string
                            minLength: 1
                  automatedDecisionMaking:
                    type: object
                    properties:
                      inUse:
                        type: boolean
                      logicInvolved:
                        type: string
                        minLength: 1
                      scopeAndIntendedEffects:
                        type: string
                        minLength: 1
                  changesOfPurpose:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        description:
                          type: string
                          minLength: 1
                        affectedDataCategories:
                          type: array
                          items:
                            type: object
                        plannedDateOfChange:
                          type: string
                          minLength: 1
                        urlOfNewVersion:
                          type: string
                          minLength: 1
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      x-accepts: application/json
      x-tira: false
      tags:
        - tilt-service
    post:
      summary: Set tilt document.
      description: Set tilt document, i.e. a machine-readable privacy policy.
      operationId: post-tilt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/paths/~1tilt/get/responses/200/content/application~1json/schema"
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      x-contentType: application/json
      tags:
        - tilt-service
    servers:
      - url: https://tilt.api.{environment}.mindtastic.lol
        variables:
          environment:
            enum:
              - live
              - stage
              - dev
            default: live
  /wiki:
    get:
      summary: Fetch wiki entries
      operationId: wiki:list
      description: >-
        This endpoint returns a list of multiple wiki entries. 


        You can use the `query` parameter to perform a fulltext search on `title` and `content`.


        By default max. 20 WikiEntrys will be in the response. To fetch more, it's recommended to perform multiple queries (API Pagination). Use the `limit` and `offset` parameters.
      parameters:
        - name: query
          in: query
          required: false
          schema:
            title: Fulltext Search Query
            type: string
        - name: limit
          in: query
          description: The maximum number of articles the response will include (Use
            together with `offset` for api pagination).
          required: false
          schema:
            title: Article Limit
            type: integer
            minimum: 1
            default: 20
        - name: offset
          in: query
          description: The number of articles that will we skipped in response (Use
            together wuth `limit` for api pagination).
          required: false
          schema:
            title: Article Offset
            type: integer
            minimum: 0
            default: 0
        - name: with_content
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: >-
            If the with content attribute is not `true`, the response will not
            return the content of wiki articles, but only the title and metadata
            attributes.


            *Note*:

            This behaviour is not implemented yet, but It will be later. This endpoint can be used to download an index of all articles, without having to download the article content. The metadata might also contain a `preview` field with the first few character of each article in a later persion of the spec. 


            As adding the parameter later would be a breaking spec, always send the with_content parameter if you actually want to fetch article contents.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - type: object
                        properties:
                          entry_count:
                            title: Entry count
                            type: integer
                        required:
                          - entry_count
                          - entries
                      - title: Wiki Entries
                        properties:
                          entries:
                            title: Entries
                            type: array
                            items:
                              allOf:
                                - title: Wiki Entry Header
                                  type: object
                                  properties:
                                    id:
                                      title: WikiEntryId
                                      type: string
                                    title:
                                      title: Title
                                      type: string
                                    created_at:
                                      title: Created At
                                      type: string
                                      format: date-time
                                    updated_at:
                                      title: Updated At
                                      type: string
                                      format: date-time
                                  required:
                                    - title
                                  example:
                                    id: 5349b4ddd2781d08c09890f3
                                    created_at: 2022-07-01T18:04:03+0000
                                    updated_at: 2022-07-01T18:04:03+0000
                                - title: Wiki Entry
                                  properties:
                                    content:
                                      title: Article content as MD
                                      type: string
                                  required:
                                    - content
                                - example:
                                    id: 5349b4ddd2781d08c09890f3
                                - example:
                                    title: Fassmodell
                                    content: >
                                      # Stress


                                      Stress ist ein Spannungszustand, der unseren Körper bereit für eine Reaktion macht.

                                      In diesem Zustand...
                                - example:
                                    created_at: 2022-07-01T18:04:03+0000
                                    updated_at: 2022-07-01T18:04:03+0000
                  - allOf:
                      - type: object
                        properties:
                          entry_count:
                            title: Entry count
                            type: integer
                        required:
                          - entry_count
                          - entries
                      - title: Wiki Headers
                        properties:
                          entries:
                            title: Entries
                            type: array
                            items:
                              title: Wiki Entry Header
                              type: object
                              properties:
                                id:
                                  title: WikiEntryId
                                  type: string
                                title:
                                  title: Title
                                  type: string
                                created_at:
                                  title: Created At
                                  type: string
                                  format: date-time
                                updated_at:
                                  title: Updated At
                                  type: string
                                  format: date-time
                              required:
                                - title
                              example:
                                id: 5349b4ddd2781d08c09890f3
                                created_at: 2022-07-01T18:04:03+0000
                                updated_at: 2022-07-01T18:04:03+0000
        "422":
          description: Invalid request parameters we're provided
          content:
            application/json:
              schema:
                title: ValidationError
                required:
                  - loc
                  - msg
                  - type
                type: object
                properties:
                  loc:
                    title: Location
                    type: array
                    items:
                      type: string
                  msg:
                    title: Message
                    type: string
                  type:
                    title: Error Type
                    type: string
        "500":
          description: Internal Server Error
      x-contentType: application/json
      tags:
        - wiki-service
      servers:
        - url: https://wiki.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  "/wiki/{articleId}":
    get:
      summary: Fetch single wiki entry
      operationId: wiki:get
      description: |-
        This article can be used to fetch a single wiki entry.

        It is not implemented yet and therefore marked as deprecated
      deprecated: true
      parameters:
        - name: articleId
          description: ID of a wiki entry
          in: path
          required: true
          schema:
            type: string
            minLength: 24
            maxLength: 24
          example: 62bda938ada05ab5872edea7
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - title: Wiki Entry Header
                    type: object
                    properties:
                      id:
                        title: WikiEntryId
                        type: string
                      title:
                        title: Title
                        type: string
                      created_at:
                        title: Created At
                        type: string
                        format: date-time
                      updated_at:
                        title: Updated At
                        type: string
                        format: date-time
                    required:
                      - title
                    example:
                      id: 5349b4ddd2781d08c09890f3
                      created_at: 2022-07-01T18:04:03+0000
                      updated_at: 2022-07-01T18:04:03+0000
                  - title: Wiki Entry
                    properties:
                      content:
                        title: Article content as MD
                        type: string
                    required:
                      - content
                  - example:
                      id: 5349b4ddd2781d08c09890f3
                  - example:
                      title: Fassmodell
                      content: >
                        # Stress


                        Stress ist ein Spannungszustand, der unseren Körper bereit für eine Reaktion macht.

                        In diesem Zustand...
                  - example:
                      created_at: 2022-07-01T18:04:03+0000
                      updated_at: 2022-07-01T18:04:03+0000
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      x-accepts: application/json
      tags:
        - wiki-service
      servers:
        - url: https://wiki.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  /admin/wiki:
    post:
      operationId: wiki:create-entry
      summary: Add new wiki entries
      description: Add wiki entries
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - title: Create Entry Request Body
                  type: object
                  properties:
                    title:
                      title: Title
                      type: string
                    content:
                      title: Content
                      type: string
                - example:
                    title: Fassmodell
                    content: >
                      # Stress


                      Stress ist ein Spannungszustand, der unseren Körper bereit für eine Reaktion macht.

                      In diesem Zustand...
        required: true
      responses:
        "201":
          description: Wiki Article created. It returns the newly inserted WikiEntry with
            timestamps and id.
          content:
            application/json:
              schema:
                $ref: "#/paths/~1wiki~1%7BarticleId%7D/get/responses/200/content/application~1j\
                  son/schema"
        "401":
          description: Unauthorized
        "422":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/paths/~1wiki/get/responses/422/content/application~1json/schema"
        "500":
          description: Internal Server Error
      x-tira: false
      x-accepts: application/json
      x-contentType: application/json
      tags:
        - wiki-service
        - admin
      security:
        - jwt: []
      servers:
        - url: https://wiki.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
  "/admin/wiki/{articleId}":
    delete:
      summary: Delete wiki entry by id.
      operationId: wiki:delete-entry
      parameters:
        - $ref: "#/paths/~1wiki~1%7BarticleId%7D/get/parameters/0"
      responses:
        "204":
          description: Deletion successfull.
        "401":
          description: Unauthorized
        "422":
          description: Invalid wikiEntryId provided
          content:
            application/json:
              schema:
                $ref: "#/paths/~1wiki/get/responses/422/content/application~1json/schema"
        "500":
          description: Internal server error
      tags:
        - wiki-service
        - admin
      security:
        - jwt: []
      servers:
        - url: https://wiki.api.{environment}.mindtastic.lol
          variables:
            environment:
              enum:
                - live
                - stage
                - dev
              default: live
components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        Example: 
        > Authorization: Bearer <token>
      x-last-modified: 1646648515924
  schemas: {}
  headers: {}
  responses: {}
  parameters: {}
  requestBodies: {}
tags:
  - name: user-service
    description: Service for storing user data and settings
  - name: mood-diary-service
    description: Fetch and stores mood diary data
  - name: motivator-service
    description: Motivator exercises and safetynet
  - name: wiki-service
    description: Static wiki articles
  - name: tilt-service
    description: Tilt provides transparency information on data processing using the
      TILT format
  - name: authentication
    description: The authentication API is based on the ORY Kratos HTTP API, but
      with some additional tweaks. See [Kratos
      Docs](https://www.ory.sh/docs/kratos/reference/api) and [Mindtastic
      Docs](github.com/mindtastic/bouncer/wiki) for more information.
servers:
  - url: https://{service}.api.{environment}.mindtastic.lol
    description: Development API for testing purposes
    variables:
      service:
        default: echo
        description: The requests gets routed to the individual microservice by pattern
          matching the requests Host header
      environment:
        enum:
          - live
          - stage
          - dev
        default: live
        description: Choose the environment to work on.
