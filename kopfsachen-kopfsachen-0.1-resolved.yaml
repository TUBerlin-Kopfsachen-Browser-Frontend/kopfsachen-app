---
openapi: 3.0.3
info:
  title: Kopfsachen
  description: Kopfsachen e. V. is an association for the promotion of young people's mental health. The goal is to teach the basics of mental health literacy in various educational formats.
  contact:
    name: Kopfsachen e. V.
    url: https://www.kopfsachen.org
    email: mail@kopfsachen.org
  version: "0.1"
servers:
- url: https://api.implementation.online
  description: ""
security:
- JWTAuth: []
tags:
- name: user-service
- name: notification-service
- name: mood-diary-service
- name: motivator-service
- name: wiki-service
- name: administration-service
- name: tilt-service
paths:
  /user:
    get:
      tags:
      - user-service
      summary: Get all users.
      description: Get all users.
      operationId: get-user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user-with-id'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    post:
      tags:
      - user-service
      summary: Create user.
      description: Create a user.
      operationId: post-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /user/{userId}:
    get:
      tags:
      - user-service
      summary: Read user by id.
      description: Read user by id.
      operationId: get-user-id
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-with-id'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    put:
      tags:
      - user-service
      summary: Update user by id.
      description: Update user by id.
      operationId: put-user-id
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    delete:
      tags:
      - user-service
      summary: Delete user by id.
      description: Delete user by id.
      operationId: delete-user-id
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
  /user/{userId}/settings:
    get:
      tags:
      - user-service
      summary: Get user's settings.
      description: Get user's settings.
      operationId: get-user-settings
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/setting'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    post:
      tags:
      - user-service
      summary: Set user's settings.
      description: Set user's settings.
      operationId: post-user-userId-settings
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/setting'
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    delete:
      tags:
      - user-service
      summary: Delete user by id.
      description: Delete user by id.
      operationId: delete-user-settings
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
  /diary/{userId}:
    get:
      tags:
      - mood-diary-service
      summary: Get mood diary by userId.
      description: Get mood diary by userId.
      operationId: get-diary
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/mood'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      x-tira: true
    post:
      tags:
      - mood-diary-service
      summary: Add mood to diary
      description: Add mood to user's diary.
      operationId: post-diary-userId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mood'
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      x-tira: true
    delete:
      tags:
      - mood-diary-service
      summary: Delete mood from user's diary.
      description: Delete mood from user's diary.
      operationId: deleteuser-userId-diary
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timestamp'
          application/xml:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /safetyNet:
    get:
      tags:
      - motivator-service
      summary: Get safety nets of all users.
      description: Get safety nets of all users - without identifying the users individually.
      operationId: get-safetyNet
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/safetyNetItem'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /safetyNet/{userId}:
    get:
      tags:
      - motivator-service
      summary: Get safety net by userId.
      description: Get safety net by userId.
      operationId: get-user-userId-safetyNet
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/safetyNetItem'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    post:
      tags:
      - motivator-service
      summary: Add safety net item to user's safety net.
      description: Add safety net item to user's safety net.
      operationId: post-user-userId-safetyNet
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/safetyNetItem'
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    delete:
      tags:
      - motivator-service
      summary: Delete safetyNet item by timestamp.
      description: Delete safetyNet item by timestamp.
      operationId: delete-user-userId-safetyNet
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: date-time
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /motivator:
    get:
      tags:
      - motivator-service
      summary: Get all motivators.
      description: Gett all motivators.
      operationId: get-motivators-userId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/motivator'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    post:
      tags:
      - motivator-service
      summary: Add motivator
      description: Add a new motivator.
      operationId: post-motivator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/motivator'
      responses:
        "200":
          description: OK
    delete:
      tags:
      - motivator-service
      summary: Delete a motivator.
      description: Delete a motivator by id.
      operationId: delete-motivator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/motivatorId'
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /motivator/{userId}:
    get:
      tags:
      - motivator-service
      summary: Get current motivators by userId.
      description: Get current motivators by userId.
      operationId: get-motivator-userId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - $ref: '#/components/schemas/motivator'
                  - $ref: '#/components/schemas/motivatorResult'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    post:
      tags:
      - motivator-service
      summary: Add motivator to user's motivators.
      description: Add motivator to user's motivators.
      operationId: post-motivator-userId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/motivator'
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    delete:
      tags:
      - motivator-service
      summary: Delete a motivator from user's motivators.
      description: Delete a motivator from user's motivators.
      operationId: delete-motivator-userId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/motivatorId'
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /motivator/{userId}/result/{motivatorId}:
    post:
      tags:
      - motivator-service
      summary: Add a new result to user's current motivator.
      description: Add a new result to user's current motivator.
      operationId: post-motivator-userId-feedback-motivatorId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: motivatorId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/motivatorResult'
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    delete:
      tags:
      - motivator-service
      summary: Delete result from user's current motivator by timestamp.
      description: Delete result from user's current motivator by timestamp.
      operationId: delete-motivator-userId-result-motivatorId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: motivatorId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timestamp'
      responses:
        "200":
          description: OK
  /notification/{userId}:
    get:
      tags:
      - notification-service
      summary: Get notifications for user by id.
      description: Get notifications for user by id.
      operationId: get-notification-userId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/notification'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    post:
      tags:
      - notification-service
      summary: Set notification for user by id.
      description: Set notification for user by id.
      operationId: post-notification-userId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notification'
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    delete:
      tags:
      - notification-service
      summary: Delete notification for user by id.
      description: Delete notification for user by id.
      operationId: delete-notification-userId
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notificationId'
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /tilt:
    get:
      tags:
      - tilt-service
      summary: Get tilt document.
      description: Get tilt document, i.e. a machine-readable privacy policy.
      operationId: get-tilt
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tilt'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      x-tira: false
    post:
      tags:
      - tilt-service
      summary: Set tilt document.
      description: Set tilt document, i.e. a machine-readable privacy policy.
      operationId: post-tilt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tilt'
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /wiki/{wikiEntryId}:
    get:
      tags:
      - wiki-service
      summary: Get all wiki entries
      description: Get all wiki entries.
      operationId: get-wiki
      parameters:
      - name: wikiEntryId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/wikiEntry'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    post:
      tags:
      - wiki-service
      summary: Add wiki entry
      description: Add wiki entry.
      operationId: post-wiki
      parameters:
      - name: wikiEntryId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/wikiEntry'
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      x-tira: false
    delete:
      tags:
      - wiki-service
      summary: Delete wiki entry by id.
      description: Delete wiki entry by id.
      operationId: delete-wiki
      parameters:
      - name: wikiEntryId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
components:
  schemas:
    user:
      required:
      - changed
      - created
      - email
      - lang
      - password
      - role
      - username
      type: object
      properties:
        username:
          maxLength: 25
          minLength: 2
          type: string
        email:
          minLength: 1
          type: string
          description: Passwords are never stored in plain text, but as hash(pwd) + salt from an widely used library.
          format: email
        password:
          type: string
          format: password
        role:
          minLength: 1
          type: string
          description: Refers to privileges.
          enum:
          - admin
          - user
        lang:
          maxLength: 2
          minLength: 2
          type: string
          default: de
          enum:
          - de
          - en
        created:
          minLength: 1
          type: string
          format: date-time
        changed:
          minLength: 1
          type: string
          format: date-time
      description: A user object
      x-examples:
        example-1:
          username: maja
          email: maja@majassen.de
          password: ahcezie2aiKoon0yaequ3eive7uphie9
          role: user
          created: 2022-03-07T14:15:44+00:00
          changed: 2022-03-07T14:15:44+00:00
        example-2:
          id: 0
          username: string
          email: user@example.com
          password: pa$$word
          role: admin
          created: 2019-08-24T14:15:22Z
          changed: 2019-08-24T14:15:22Z
      x-tira: true
    user-with-id:
      title: user-with-id
      allOf:
      - type: object
        properties:
          id:
            type: number
      - $ref: '#/components/schemas/user'
      x-examples:
        example-1:
          id: 42
          username: string
          email: user@example.com
          password: pa$$word
          role: admin
          created: 2019-08-24T14:15:22Z
          changed: 2019-08-24T14:15:22Z
    tilt:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/tilt_meta'
        controller:
          $ref: '#/components/schemas/tilt_controller'
        dataProtectionOfficer:
          $ref: '#/components/schemas/tilt_dataProtectionOfficer'
        dataDisclosed:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/tilt_dataDisclosed'
        thirdCountryTransfers:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/tilt_thirdCountryTransfers'
        accessAndDataPortability:
          $ref: '#/components/schemas/tilt_accessAndDataPortability'
        sources:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/tilt_sources_1'
        rightToInformation:
          $ref: '#/components/schemas/tilt_rightToInformation'
        rightToRectificationOrDeletion:
          $ref: '#/components/schemas/tilt_rightToInformation'
        rightToDataPortability:
          $ref: '#/components/schemas/tilt_rightToInformation'
        rightToWithdrawConsent:
          $ref: '#/components/schemas/tilt_rightToInformation'
        rightToComplain:
          $ref: '#/components/schemas/tilt_rightToComplain'
        automatedDecisionMaking:
          $ref: '#/components/schemas/tilt_automatedDecisionMaking'
        changesOfPurpose:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/tilt_changesOfPurpose'
      description: 'A valid tilt document validates against the tilt schema: https://github.com/Transparency-Information-Language/schema/blob/master/tilt-schema.json'
      x-examples:
        example-1:
          meta:
            _id: f1424f86-ca0f-4f0c-9438-43cc00509931
            name: Green Company
            created: 2020-04-03T15:53:05.929588
            modified: 2020-04-03T15:53:05.929588
            version: 2
            language: de
            status: active
            url: https://green-bikes.de/privacy
            _hash: be81d309088dde861ab5fc4d62d4bbfe0aeef3e3baf2f5362c1086f451f0a1e7
          controller:
            name: Green Company AG
            division: Product line e-mobility
            address: Wolfsburger Ring 2, 38440 Berlin
            country: DE
            representative:
              name: Jane Super
              email: contact@greencompany.de
              phone: 0049 151 1234 5678
          dataProtectionOfficer:
            name: Jane Super
            address: Wolfsburger Ring 2, 38440 Berlin
            country: DE
            email: contact@greencompany.de
            phone: 0049 151 1234 5678
          dataDisclosed:
          - _id: f1424f86-ca0f-4f0c-9438-43cc00509931
            category: E-mail address
            purposes:
            - purpose: Marketing
              description: Newsletter will be sent out once a month.
            legalBases:
            - reference: GDPR-99-1-a
              description: The data are processed on the basis of Art. 99 GDPR which states...
            - reference: BDSG-42-5
              description: BDSG-42-5 refers to the processing of personal data within...
            legitimateInterests:
            - exists: false
              reasoning: There is an legitimate interest based on ... and is not overwritten because ...
            recipients:
            - name: Yellow Company AG
              division: Product line e-mobility
              address: Triana 123, 9999 Seville
              country: ES
              representative:
                name: Jane Super
                email: contact@yellowcompany.de
                phone: 0049 151 1234 9876
              category: Marketing content provider
            - category: Responsible Statistical Institutes
            storage:
            - temporal:
              - description: Creating backups.
                ttl: P3Y6M4DT12H30M5S
              - description: Finishing ordering process.
                ttl: 2020-08-09T18:31:42P3Y6M4DT12H30M17S
              purposeConditional:
              - Data is stored until the end of the ordering process.
              legalBasisConditional:
              - SGB-100-42
              aggregationFunction: max
            nonDisclosure:
              legalRequirement: false
              contractualRegulation: false
              obligationToProvide: false
              consequences: If the data is not disclosed, the shipment cannot be delivered.
          thirdCountryTransfers:
          - country: ES
            adequacyDecision:
              available: true
              description: An adequacy decision was made on the 23rd April 2020 by...
            appropriateGuarantees:
              available: true
              description: Here the appropriate guarantee was formulated by...
            presenceOfEnforceableRightsAndEffectiveRemedies:
              available: true
              description: These rights are given because of...
            standardDataProtectionClause:
              available: true
              description: 'The standard data protection clause which applies here can be found here: ...'
          accessAndDataPortability:
            available: true
            description: Data access is possible through...
            url: https://green-bikes.de/access
            email: access@greencompany.de
            identificationEvidences:
            - ID card copy
            - Email verification
            administrativeFee:
              amount: 0
              currency: EUR
            dataFormats:
            - json
            - xml
          sources:
          - _id: f1423cc00509931
            dataCategory: Creditworthiness
            sources:
            - description: This information could be retrieved from...
              url: https://blueCompany.org
              publiclyAvailable: false
          rightToInformation:
            available: true
            description: For the right to information please use this contact form and...
            url: https://greencompany.org/rightToInformation
            email: contact@greencompany.de
            identificationEvidences:
            - ID card copy
            - Email verification
          rightToRectificationOrDeletion:
            available: true
            description: For the right to rectification please use this contact form and...
            url: https://greencompany.org/rights
            email: contact@greencompany.de
            identificationEvidences:
            - ID card copy
            - Email verification
          rightToDataPortability:
            available: false
            description: Data portability is only possible when...
            url: https://greencompany.org/rights
            email: contact@greencompany.de
            identificationEvidences:
            - ID card copy
          rightToWithdrawConsent:
            available: true
            description: For the right to withdraw consent please use this contact form and...
            url: https://greencompany.org/rights
            email: contact@greencompany.de
            identificationEvidences:
            - Email verification
          rightToComplain:
            available: true
            description: For the right to complain please use this contact form and...
            url: https://greencompany.org/rights
            email: contact@greencompany.de
            identificationEvidences:
            - ID card copy
            - Email verification
            supervisoryAuthority:
              name: Commissioner for Data Protection
              address: Friedrichstrasse 219, 10969 Berlin
              country: DE
              email: mailbox@privacy-berlin.de
              phone: 0049 444 222 111
          automatedDecisionMaking:
            inUse: true
            logicInvolved: The personal data are processed as follows...
            scopeAndIntendedEffects: From processing follows...
          changesOfPurpose:
          - description: Due to technical requirements...
            affectedDataCategories:
            - Email adress
            - Credit score
            plannedDateOfChange: 2020-08-20
            urlOfNewVersion: https://greencomp.de/privacypolicy/2
    mood:
      title: mood
      type: object
      properties:
        type:
          type: string
          enum:
          - positive
          - negative
          - neutral
        description:
          type: string
          example: angry
        timestamp:
          type: string
          format: date-time
    timestamp:
      title: timestamp
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
    safetyNetItem:
      required:
      - name
      - strategies
      - type
      type: object
      properties:
        name:
          minLength: 1
          type: string
        type:
          minLength: 1
          type: string
          description: Which kind of item is this (i.a., influences symbol in UI)?
          enum:
          - pet
          - other
          - situationControl
          - relaxation
        strategies:
          type: array
          description: How can this item help the user to feel better?
          items:
            type: string
        feedback:
          type: array
          items:
            $ref: '#/components/schemas/safetyNetItemFeedback'
      description: ""
      x-examples:
        example-1:
          name: Theo
          type: pet
          strategies:
          - cuddle
          - play
          - go for a walk
    safetyNetItemFeedback:
      title: safetyNetItemFeedback
      type: object
      properties:
        itHelped:
          type: boolean
        comment:
          type: string
        timestamp:
          type: string
          format: date-time
      description: ""
      x-examples: {}
    motivator:
      title: motivator
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
          - situationControl
          - relaxation
        headline:
          type: string
        description:
          type: string
        textContents:
          type: array
          items:
            type: string
        mediaContents:
          type: array
          items:
            $ref: '#/components/schemas/motivator_mediaContents'
        userInputForm:
          type: string
          description: May describe a form for input by the user (format to be defined, e.g., JSON Schema).
    motivatorResult:
      title: motivatorResult
      type: object
      properties:
        motivatorId:
          type: string
        timestamp:
          type: string
          format: date-time
        results:
          type: array
          items:
            type: string
    motivatorId:
      title: motivatorId
      type: object
      properties:
        id:
          type: number
    notification:
      title: notification
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        timestamp:
          type: string
          format: date-time
        ttl:
          type: string
          description: time to live (i.e., not relevant anymore at specified time)
          format: date-time
        ? ""
        : type: string
    notificationId:
      title: notificationId
      type: object
      properties:
        id:
          type: string
    setting:
      title: setting
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      description: Key-value pairs of settings in the app.
    wikiEntry:
      title: wikiEntry
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        contents:
          type: array
          items:
            $ref: '#/components/schemas/wikiEntry_contents'
    tilt_meta:
      type: object
      properties:
        _id:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        created:
          minLength: 1
          type: string
        modified:
          minLength: 1
          type: string
        version:
          type: number
        language:
          minLength: 1
          type: string
        status:
          minLength: 1
          type: string
        url:
          minLength: 1
          type: string
        _hash:
          minLength: 1
          type: string
      example: null
    tilt_controller_representative:
      type: object
      properties:
        name:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
        phone:
          minLength: 1
          type: string
      example: null
    tilt_controller:
      type: object
      properties:
        name:
          minLength: 1
          type: string
        division:
          minLength: 1
          type: string
        address:
          minLength: 1
          type: string
        country:
          minLength: 1
          type: string
        representative:
          $ref: '#/components/schemas/tilt_controller_representative'
      example: null
    tilt_dataProtectionOfficer:
      type: object
      properties:
        name:
          minLength: 1
          type: string
        address:
          minLength: 1
          type: string
        country:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
        phone:
          minLength: 1
          type: string
      example: null
    tilt_purposes:
      type: object
      properties:
        purpose:
          minLength: 1
          type: string
        description:
          minLength: 1
          type: string
      example: null
    tilt_legalBases:
      type: object
      properties:
        reference:
          minLength: 1
          type: string
        description:
          minLength: 1
          type: string
      example: null
    tilt_legitimateInterests:
      type: object
      properties:
        exists:
          type: boolean
        reasoning:
          minLength: 1
          type: string
      example: null
    tilt_representative:
      required:
      - email
      - name
      - phone
      type: object
      properties:
        name:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
        phone:
          minLength: 1
          type: string
      example: null
    tilt_recipients:
      type: object
      properties:
        name:
          minLength: 1
          type: string
        division:
          minLength: 1
          type: string
        address:
          minLength: 1
          type: string
        country:
          minLength: 1
          type: string
        representative:
          $ref: '#/components/schemas/tilt_representative'
        category:
          minLength: 1
          type: string
      example: null
    tilt_temporal:
      required:
      - description
      - ttl
      type: object
      properties:
        description:
          minLength: 1
          type: string
        ttl:
          minLength: 1
          type: string
      example: null
    tilt_storage:
      type: object
      properties:
        temporal:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/tilt_temporal'
        purposeConditional:
          type: array
          items:
            type: object
        legalBasisConditional:
          type: array
          items:
            type: object
        aggregationFunction:
          minLength: 1
          type: string
      example: null
    tilt_nonDisclosure:
      required:
      - consequences
      - contractualRegulation
      - legalRequirement
      - obligationToProvide
      type: object
      properties:
        legalRequirement:
          type: boolean
        contractualRegulation:
          type: boolean
        obligationToProvide:
          type: boolean
        consequences:
          minLength: 1
          type: string
      example: null
    tilt_dataDisclosed:
      type: object
      properties:
        _id:
          minLength: 1
          type: string
        category:
          minLength: 1
          type: string
        purposes:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/tilt_purposes'
        legalBases:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/tilt_legalBases'
        legitimateInterests:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/tilt_legitimateInterests'
        recipients:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/tilt_recipients'
        storage:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/tilt_storage'
        nonDisclosure:
          $ref: '#/components/schemas/tilt_nonDisclosure'
      example: null
    tilt_adequacyDecision:
      type: object
      properties:
        available:
          type: boolean
        description:
          minLength: 1
          type: string
      example: null
    tilt_thirdCountryTransfers:
      type: object
      properties:
        country:
          minLength: 1
          type: string
        adequacyDecision:
          $ref: '#/components/schemas/tilt_adequacyDecision'
        appropriateGuarantees:
          $ref: '#/components/schemas/tilt_adequacyDecision'
        presenceOfEnforceableRightsAndEffectiveRemedies:
          $ref: '#/components/schemas/tilt_adequacyDecision'
        standardDataProtectionClause:
          $ref: '#/components/schemas/tilt_adequacyDecision'
      example: null
    tilt_accessAndDataPortability_administrativeFee:
      type: object
      properties:
        amount:
          type: number
        currency:
          minLength: 1
          type: string
      example: null
    tilt_accessAndDataPortability:
      type: object
      properties:
        available:
          type: boolean
        description:
          minLength: 1
          type: string
        url:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
        identificationEvidences:
          type: array
          items:
            type: object
        administrativeFee:
          $ref: '#/components/schemas/tilt_accessAndDataPortability_administrativeFee'
        dataFormats:
          type: array
          items:
            type: object
      example: null
    tilt_sources:
      type: object
      properties:
        description:
          minLength: 1
          type: string
        url:
          minLength: 1
          type: string
        publiclyAvailable:
          type: boolean
      example: null
    tilt_sources_1:
      type: object
      properties:
        _id:
          minLength: 1
          type: string
        dataCategory:
          minLength: 1
          type: string
        sources:
          minItems: 1
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/tilt_sources'
      example: null
    tilt_rightToInformation:
      type: object
      properties:
        available:
          type: boolean
        description:
          minLength: 1
          type: string
        url:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
        identificationEvidences:
          type: array
          items:
            type: object
      example: null
    tilt_rightToComplain:
      type: object
      properties:
        available:
          type: boolean
        description:
          minLength: 1
          type: string
        url:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
        identificationEvidences:
          type: array
          items:
            type: object
        supervisoryAuthority:
          $ref: '#/components/schemas/tilt_dataProtectionOfficer'
      example: null
    tilt_automatedDecisionMaking:
      type: object
      properties:
        inUse:
          type: boolean
        logicInvolved:
          minLength: 1
          type: string
        scopeAndIntendedEffects:
          minLength: 1
          type: string
      example: null
    tilt_changesOfPurpose:
      type: object
      properties:
        description:
          minLength: 1
          type: string
        affectedDataCategories:
          type: array
          items:
            type: object
        plannedDateOfChange:
          minLength: 1
          type: string
        urlOfNewVersion:
          minLength: 1
          type: string
      example: null
    motivator_mediaContents:
      type: object
      properties:
        format:
          type: string
          enum:
          - document
          - image
          - audio
          - video
        url:
          type: string
          format: uri
      example: null
    wikiEntry_contents:
      type: object
      properties:
        type:
          type: string
          enum:
          - text
          - url
        content:
          type: string
      example: null
  responses: {}
  parameters:
    userId:
      name: userId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    motivatorId:
      name: motivatorId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    wikiEntryId:
      name: wikiEntryId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
  requestBodies: {}
  headers: {}
  securitySchemes:
    JWTAuth:
      type: http
      description: "Example: \n> Authorization: Bearer <token>"
      scheme: bearer
      bearerFormat: JWT
      x-last-modified: 1646648515924
